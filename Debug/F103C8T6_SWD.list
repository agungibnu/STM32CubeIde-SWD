
F103C8T6_SWD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f40  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800204c  0800204c  0001204c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002124  08002124  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002124  08002124  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002124  08002124  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002124  08002124  00012124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002128  08002128  00012128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800212c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000070  0800219c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  0800219c  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002fc3  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f6b  00000000  00000000  0002305c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000450  00000000  00000000  00023fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003b8  00000000  00000000  00024418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017071  00000000  00000000  000247d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004ae5  00000000  00000000  0003b841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080c59  00000000  00000000  00040326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c0f7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001754  00000000  00000000  000c0fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002034 	.word	0x08002034

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002034 	.word	0x08002034

0800014c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000154:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800016c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000170:	2b00      	cmp	r3, #0
 8000172:	d00b      	beq.n	800018c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000174:	e000      	b.n	8000178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d0f9      	beq.n	8000176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000182:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800018c:	687b      	ldr	r3, [r7, #4]
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0
 800019e:	60f8      	str	r0, [r7, #12]
 80001a0:	60b9      	str	r1, [r7, #8]
 80001a2:	607a      	str	r2, [r7, #4]
     int DataIdx;
     for (DataIdx = 0; DataIdx < len; DataIdx++){
 80001a4:	2300      	movs	r3, #0
 80001a6:	617b      	str	r3, [r7, #20]
 80001a8:	e009      	b.n	80001be <_write+0x26>
         ITM_SendChar((*ptr++));
 80001aa:	68bb      	ldr	r3, [r7, #8]
 80001ac:	1c5a      	adds	r2, r3, #1
 80001ae:	60ba      	str	r2, [r7, #8]
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	4618      	mov	r0, r3
 80001b4:	f7ff ffca 	bl	800014c <ITM_SendChar>
     for (DataIdx = 0; DataIdx < len; DataIdx++){
 80001b8:	697b      	ldr	r3, [r7, #20]
 80001ba:	3301      	adds	r3, #1
 80001bc:	617b      	str	r3, [r7, #20]
 80001be:	697a      	ldr	r2, [r7, #20]
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	dbf1      	blt.n	80001aa <_write+0x12>
     }
     return len;
 80001c6:	687b      	ldr	r3, [r7, #4]
}
 80001c8:	4618      	mov	r0, r3
 80001ca:	3718      	adds	r7, #24
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d6:	f000 f9a9 	bl	800052c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001da:	f000 f825 	bl	8000228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001de:	f000 f869 	bl	80002b4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  printf("[Debug SWD]\n");
 80001e2:	480e      	ldr	r0, [pc, #56]	; (800021c <main+0x4c>)
 80001e4:	f000 ffa2 	bl	800112c <puts>

  for (int x = 0; x < 5; x++){
 80001e8:	2300      	movs	r3, #0
 80001ea:	607b      	str	r3, [r7, #4]
 80001ec:	e012      	b.n	8000214 <main+0x44>
	  counter = counter + 1;
 80001ee:	4b0c      	ldr	r3, [pc, #48]	; (8000220 <main+0x50>)
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	3301      	adds	r3, #1
 80001f4:	b2da      	uxtb	r2, r3
 80001f6:	4b0a      	ldr	r3, [pc, #40]	; (8000220 <main+0x50>)
 80001f8:	701a      	strb	r2, [r3, #0]
	  printf("Counter : %d \n", counter);
 80001fa:	4b09      	ldr	r3, [pc, #36]	; (8000220 <main+0x50>)
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	4619      	mov	r1, r3
 8000200:	4808      	ldr	r0, [pc, #32]	; (8000224 <main+0x54>)
 8000202:	f000 ff0d 	bl	8001020 <iprintf>
	  HAL_Delay(1000);
 8000206:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800020a:	f000 f9f1 	bl	80005f0 <HAL_Delay>
  for (int x = 0; x < 5; x++){
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	3301      	adds	r3, #1
 8000212:	607b      	str	r3, [r7, #4]
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	2b04      	cmp	r3, #4
 8000218:	dde9      	ble.n	80001ee <main+0x1e>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800021a:	e7fe      	b.n	800021a <main+0x4a>
 800021c:	0800204c 	.word	0x0800204c
 8000220:	2000008c 	.word	0x2000008c
 8000224:	08002058 	.word	0x08002058

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b090      	sub	sp, #64	; 0x40
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0318 	add.w	r3, r7, #24
 8000232:	2228      	movs	r2, #40	; 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f000 feea 	bl	8001010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]
 8000248:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800024a:	2301      	movs	r3, #1
 800024c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800024e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000252:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000258:	2301      	movs	r3, #1
 800025a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025c:	2302      	movs	r3, #2
 800025e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000260:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000264:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000266:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800026a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026c:	f107 0318 	add.w	r3, r7, #24
 8000270:	4618      	mov	r0, r3
 8000272:	f000 fac5 	bl	8000800 <HAL_RCC_OscConfig>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800027c:	f000 f848 	bl	8000310 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000280:	230f      	movs	r3, #15
 8000282:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000284:	2302      	movs	r3, #2
 8000286:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000290:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	2102      	movs	r1, #2
 800029a:	4618      	mov	r0, r3
 800029c:	f000 fd32 	bl	8000d04 <HAL_RCC_ClockConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002a6:	f000 f833 	bl	8000310 <Error_Handler>
  }
}
 80002aa:	bf00      	nop
 80002ac:	3740      	adds	r7, #64	; 0x40
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
	...

080002b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002ba:	4b14      	ldr	r3, [pc, #80]	; (800030c <MX_GPIO_Init+0x58>)
 80002bc:	699b      	ldr	r3, [r3, #24]
 80002be:	4a13      	ldr	r2, [pc, #76]	; (800030c <MX_GPIO_Init+0x58>)
 80002c0:	f043 0320 	orr.w	r3, r3, #32
 80002c4:	6193      	str	r3, [r2, #24]
 80002c6:	4b11      	ldr	r3, [pc, #68]	; (800030c <MX_GPIO_Init+0x58>)
 80002c8:	699b      	ldr	r3, [r3, #24]
 80002ca:	f003 0320 	and.w	r3, r3, #32
 80002ce:	60fb      	str	r3, [r7, #12]
 80002d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d2:	4b0e      	ldr	r3, [pc, #56]	; (800030c <MX_GPIO_Init+0x58>)
 80002d4:	699b      	ldr	r3, [r3, #24]
 80002d6:	4a0d      	ldr	r2, [pc, #52]	; (800030c <MX_GPIO_Init+0x58>)
 80002d8:	f043 0304 	orr.w	r3, r3, #4
 80002dc:	6193      	str	r3, [r2, #24]
 80002de:	4b0b      	ldr	r3, [pc, #44]	; (800030c <MX_GPIO_Init+0x58>)
 80002e0:	699b      	ldr	r3, [r3, #24]
 80002e2:	f003 0304 	and.w	r3, r3, #4
 80002e6:	60bb      	str	r3, [r7, #8]
 80002e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ea:	4b08      	ldr	r3, [pc, #32]	; (800030c <MX_GPIO_Init+0x58>)
 80002ec:	699b      	ldr	r3, [r3, #24]
 80002ee:	4a07      	ldr	r2, [pc, #28]	; (800030c <MX_GPIO_Init+0x58>)
 80002f0:	f043 0308 	orr.w	r3, r3, #8
 80002f4:	6193      	str	r3, [r2, #24]
 80002f6:	4b05      	ldr	r3, [pc, #20]	; (800030c <MX_GPIO_Init+0x58>)
 80002f8:	699b      	ldr	r3, [r3, #24]
 80002fa:	f003 0308 	and.w	r3, r3, #8
 80002fe:	607b      	str	r3, [r7, #4]
 8000300:	687b      	ldr	r3, [r7, #4]

}
 8000302:	bf00      	nop
 8000304:	3714      	adds	r7, #20
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr
 800030c:	40021000 	.word	0x40021000

08000310 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000314:	b672      	cpsid	i
}
 8000316:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000318:	e7fe      	b.n	8000318 <Error_Handler+0x8>
	...

0800031c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800031c:	b480      	push	{r7}
 800031e:	b085      	sub	sp, #20
 8000320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000322:	4b15      	ldr	r3, [pc, #84]	; (8000378 <HAL_MspInit+0x5c>)
 8000324:	699b      	ldr	r3, [r3, #24]
 8000326:	4a14      	ldr	r2, [pc, #80]	; (8000378 <HAL_MspInit+0x5c>)
 8000328:	f043 0301 	orr.w	r3, r3, #1
 800032c:	6193      	str	r3, [r2, #24]
 800032e:	4b12      	ldr	r3, [pc, #72]	; (8000378 <HAL_MspInit+0x5c>)
 8000330:	699b      	ldr	r3, [r3, #24]
 8000332:	f003 0301 	and.w	r3, r3, #1
 8000336:	60bb      	str	r3, [r7, #8]
 8000338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800033a:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <HAL_MspInit+0x5c>)
 800033c:	69db      	ldr	r3, [r3, #28]
 800033e:	4a0e      	ldr	r2, [pc, #56]	; (8000378 <HAL_MspInit+0x5c>)
 8000340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000344:	61d3      	str	r3, [r2, #28]
 8000346:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <HAL_MspInit+0x5c>)
 8000348:	69db      	ldr	r3, [r3, #28]
 800034a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800034e:	607b      	str	r3, [r7, #4]
 8000350:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000352:	4b0a      	ldr	r3, [pc, #40]	; (800037c <HAL_MspInit+0x60>)
 8000354:	685b      	ldr	r3, [r3, #4]
 8000356:	60fb      	str	r3, [r7, #12]
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800035e:	60fb      	str	r3, [r7, #12]
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	4a04      	ldr	r2, [pc, #16]	; (800037c <HAL_MspInit+0x60>)
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800036e:	bf00      	nop
 8000370:	3714      	adds	r7, #20
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr
 8000378:	40021000 	.word	0x40021000
 800037c:	40010000 	.word	0x40010000

08000380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000384:	e7fe      	b.n	8000384 <NMI_Handler+0x4>

08000386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800038a:	e7fe      	b.n	800038a <HardFault_Handler+0x4>

0800038c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000390:	e7fe      	b.n	8000390 <MemManage_Handler+0x4>

08000392 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000392:	b480      	push	{r7}
 8000394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000396:	e7fe      	b.n	8000396 <BusFault_Handler+0x4>

08000398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800039c:	e7fe      	b.n	800039c <UsageFault_Handler+0x4>

0800039e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800039e:	b480      	push	{r7}
 80003a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003a2:	bf00      	nop
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc80      	pop	{r7}
 80003a8:	4770      	bx	lr

080003aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003aa:	b480      	push	{r7}
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003ae:	bf00      	nop
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr

080003b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003b6:	b480      	push	{r7}
 80003b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003ba:	bf00      	nop
 80003bc:	46bd      	mov	sp, r7
 80003be:	bc80      	pop	{r7}
 80003c0:	4770      	bx	lr

080003c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003c2:	b580      	push	{r7, lr}
 80003c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003c6:	f000 f8f7 	bl	80005b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}

080003ce <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003ce:	b580      	push	{r7, lr}
 80003d0:	b086      	sub	sp, #24
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	60f8      	str	r0, [r7, #12]
 80003d6:	60b9      	str	r1, [r7, #8]
 80003d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003da:	2300      	movs	r3, #0
 80003dc:	617b      	str	r3, [r7, #20]
 80003de:	e00a      	b.n	80003f6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80003e0:	f3af 8000 	nop.w
 80003e4:	4601      	mov	r1, r0
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	1c5a      	adds	r2, r3, #1
 80003ea:	60ba      	str	r2, [r7, #8]
 80003ec:	b2ca      	uxtb	r2, r1
 80003ee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003f0:	697b      	ldr	r3, [r7, #20]
 80003f2:	3301      	adds	r3, #1
 80003f4:	617b      	str	r3, [r7, #20]
 80003f6:	697a      	ldr	r2, [r7, #20]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	429a      	cmp	r2, r3
 80003fc:	dbf0      	blt.n	80003e0 <_read+0x12>
	}

return len;
 80003fe:	687b      	ldr	r3, [r7, #4]
}
 8000400:	4618      	mov	r0, r3
 8000402:	3718      	adds	r7, #24
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	return -1;
 8000410:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000414:	4618      	mov	r0, r3
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	bc80      	pop	{r7}
 800041c:	4770      	bx	lr

0800041e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800041e:	b480      	push	{r7}
 8000420:	b083      	sub	sp, #12
 8000422:	af00      	add	r7, sp, #0
 8000424:	6078      	str	r0, [r7, #4]
 8000426:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800042e:	605a      	str	r2, [r3, #4]
	return 0;
 8000430:	2300      	movs	r3, #0
}
 8000432:	4618      	mov	r0, r3
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr

0800043c <_isatty>:

int _isatty(int file)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
	return 1;
 8000444:	2301      	movs	r3, #1
}
 8000446:	4618      	mov	r0, r3
 8000448:	370c      	adds	r7, #12
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr

08000450 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000450:	b480      	push	{r7}
 8000452:	b085      	sub	sp, #20
 8000454:	af00      	add	r7, sp, #0
 8000456:	60f8      	str	r0, [r7, #12]
 8000458:	60b9      	str	r1, [r7, #8]
 800045a:	607a      	str	r2, [r7, #4]
	return 0;
 800045c:	2300      	movs	r3, #0
}
 800045e:	4618      	mov	r0, r3
 8000460:	3714      	adds	r7, #20
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr

08000468 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000470:	4a14      	ldr	r2, [pc, #80]	; (80004c4 <_sbrk+0x5c>)
 8000472:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <_sbrk+0x60>)
 8000474:	1ad3      	subs	r3, r2, r3
 8000476:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000478:	697b      	ldr	r3, [r7, #20]
 800047a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800047c:	4b13      	ldr	r3, [pc, #76]	; (80004cc <_sbrk+0x64>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d102      	bne.n	800048a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000484:	4b11      	ldr	r3, [pc, #68]	; (80004cc <_sbrk+0x64>)
 8000486:	4a12      	ldr	r2, [pc, #72]	; (80004d0 <_sbrk+0x68>)
 8000488:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800048a:	4b10      	ldr	r3, [pc, #64]	; (80004cc <_sbrk+0x64>)
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4413      	add	r3, r2
 8000492:	693a      	ldr	r2, [r7, #16]
 8000494:	429a      	cmp	r2, r3
 8000496:	d207      	bcs.n	80004a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000498:	f000 fd90 	bl	8000fbc <__errno>
 800049c:	4603      	mov	r3, r0
 800049e:	220c      	movs	r2, #12
 80004a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004a2:	f04f 33ff 	mov.w	r3, #4294967295
 80004a6:	e009      	b.n	80004bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004a8:	4b08      	ldr	r3, [pc, #32]	; (80004cc <_sbrk+0x64>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004ae:	4b07      	ldr	r3, [pc, #28]	; (80004cc <_sbrk+0x64>)
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4413      	add	r3, r2
 80004b6:	4a05      	ldr	r2, [pc, #20]	; (80004cc <_sbrk+0x64>)
 80004b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004ba:	68fb      	ldr	r3, [r7, #12]
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3718      	adds	r7, #24
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20005000 	.word	0x20005000
 80004c8:	00000400 	.word	0x00000400
 80004cc:	20000090 	.word	0x20000090
 80004d0:	200000a8 	.word	0x200000a8

080004d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr

080004e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004e0:	f7ff fff8 	bl	80004d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e4:	480b      	ldr	r0, [pc, #44]	; (8000514 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004e6:	490c      	ldr	r1, [pc, #48]	; (8000518 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004e8:	4a0c      	ldr	r2, [pc, #48]	; (800051c <LoopFillZerobss+0x16>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ec:	e002      	b.n	80004f4 <LoopCopyDataInit>

080004ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f2:	3304      	adds	r3, #4

080004f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f8:	d3f9      	bcc.n	80004ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fa:	4a09      	ldr	r2, [pc, #36]	; (8000520 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004fc:	4c09      	ldr	r4, [pc, #36]	; (8000524 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000500:	e001      	b.n	8000506 <LoopFillZerobss>

08000502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000504:	3204      	adds	r2, #4

08000506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000508:	d3fb      	bcc.n	8000502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800050a:	f000 fd5d 	bl	8000fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800050e:	f7ff fe5f 	bl	80001d0 <main>
  bx lr
 8000512:	4770      	bx	lr
  ldr r0, =_sdata
 8000514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000518:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800051c:	0800212c 	.word	0x0800212c
  ldr r2, =_sbss
 8000520:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000524:	200000a8 	.word	0x200000a8

08000528 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000528:	e7fe      	b.n	8000528 <ADC1_2_IRQHandler>
	...

0800052c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <HAL_Init+0x28>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a07      	ldr	r2, [pc, #28]	; (8000554 <HAL_Init+0x28>)
 8000536:	f043 0310 	orr.w	r3, r3, #16
 800053a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f92b 	bl	8000798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	200f      	movs	r0, #15
 8000544:	f000 f808 	bl	8000558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f7ff fee8 	bl	800031c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40022000 	.word	0x40022000

08000558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x54>)
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_InitTick+0x58>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4619      	mov	r1, r3
 800056a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000572:	fbb2 f3f3 	udiv	r3, r2, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f935 	bl	80007e6 <HAL_SYSTICK_Config>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000582:	2301      	movs	r3, #1
 8000584:	e00e      	b.n	80005a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b0f      	cmp	r3, #15
 800058a:	d80a      	bhi.n	80005a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800058c:	2200      	movs	r2, #0
 800058e:	6879      	ldr	r1, [r7, #4]
 8000590:	f04f 30ff 	mov.w	r0, #4294967295
 8000594:	f000 f90b 	bl	80007ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <HAL_InitTick+0x5c>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059e:	2300      	movs	r3, #0
 80005a0:	e000      	b.n	80005a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000000 	.word	0x20000000
 80005b0:	20000008 	.word	0x20000008
 80005b4:	20000004 	.word	0x20000004

080005b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <HAL_IncTick+0x1c>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <HAL_IncTick+0x20>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	4a03      	ldr	r2, [pc, #12]	; (80005d8 <HAL_IncTick+0x20>)
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr
 80005d4:	20000008 	.word	0x20000008
 80005d8:	20000094 	.word	0x20000094

080005dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;
 80005e0:	4b02      	ldr	r3, [pc, #8]	; (80005ec <HAL_GetTick+0x10>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr
 80005ec:	20000094 	.word	0x20000094

080005f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f8:	f7ff fff0 	bl	80005dc <HAL_GetTick>
 80005fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000608:	d005      	beq.n	8000616 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <HAL_Delay+0x44>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	461a      	mov	r2, r3
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	4413      	add	r3, r2
 8000614:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000616:	bf00      	nop
 8000618:	f7ff ffe0 	bl	80005dc <HAL_GetTick>
 800061c:	4602      	mov	r2, r0
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	68fa      	ldr	r2, [r7, #12]
 8000624:	429a      	cmp	r2, r3
 8000626:	d8f7      	bhi.n	8000618 <HAL_Delay+0x28>
  {
  }
}
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000008 	.word	0x20000008

08000638 <__NVIC_SetPriorityGrouping>:
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f003 0307 	and.w	r3, r3, #7
 8000646:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <__NVIC_SetPriorityGrouping+0x44>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800064e:	68ba      	ldr	r2, [r7, #8]
 8000650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000654:	4013      	ands	r3, r2
 8000656:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800066a:	4a04      	ldr	r2, [pc, #16]	; (800067c <__NVIC_SetPriorityGrouping+0x44>)
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	60d3      	str	r3, [r2, #12]
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <__NVIC_GetPriorityGrouping>:
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <__NVIC_GetPriorityGrouping+0x18>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	0a1b      	lsrs	r3, r3, #8
 800068a:	f003 0307 	and.w	r3, r3, #7
}
 800068e:	4618      	mov	r0, r3
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <__NVIC_SetPriority>:
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	db0a      	blt.n	80006c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	490c      	ldr	r1, [pc, #48]	; (80006e8 <__NVIC_SetPriority+0x4c>)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	0112      	lsls	r2, r2, #4
 80006bc:	b2d2      	uxtb	r2, r2
 80006be:	440b      	add	r3, r1
 80006c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006c4:	e00a      	b.n	80006dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	4908      	ldr	r1, [pc, #32]	; (80006ec <__NVIC_SetPriority+0x50>)
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	f003 030f 	and.w	r3, r3, #15
 80006d2:	3b04      	subs	r3, #4
 80006d4:	0112      	lsls	r2, r2, #4
 80006d6:	b2d2      	uxtb	r2, r2
 80006d8:	440b      	add	r3, r1
 80006da:	761a      	strb	r2, [r3, #24]
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000e100 	.word	0xe000e100
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <NVIC_EncodePriority>:
{
 80006f0:	b480      	push	{r7}
 80006f2:	b089      	sub	sp, #36	; 0x24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	f003 0307 	and.w	r3, r3, #7
 8000702:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000704:	69fb      	ldr	r3, [r7, #28]
 8000706:	f1c3 0307 	rsb	r3, r3, #7
 800070a:	2b04      	cmp	r3, #4
 800070c:	bf28      	it	cs
 800070e:	2304      	movcs	r3, #4
 8000710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3304      	adds	r3, #4
 8000716:	2b06      	cmp	r3, #6
 8000718:	d902      	bls.n	8000720 <NVIC_EncodePriority+0x30>
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	3b03      	subs	r3, #3
 800071e:	e000      	b.n	8000722 <NVIC_EncodePriority+0x32>
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000724:	f04f 32ff 	mov.w	r2, #4294967295
 8000728:	69bb      	ldr	r3, [r7, #24]
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
 800072e:	43da      	mvns	r2, r3
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	401a      	ands	r2, r3
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000738:	f04f 31ff 	mov.w	r1, #4294967295
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	43d9      	mvns	r1, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000748:	4313      	orrs	r3, r2
}
 800074a:	4618      	mov	r0, r3
 800074c:	3724      	adds	r7, #36	; 0x24
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <SysTick_Config>:
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3b01      	subs	r3, #1
 8000760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000764:	d301      	bcc.n	800076a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000766:	2301      	movs	r3, #1
 8000768:	e00f      	b.n	800078a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076a:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <SysTick_Config+0x40>)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3b01      	subs	r3, #1
 8000770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000772:	210f      	movs	r1, #15
 8000774:	f04f 30ff 	mov.w	r0, #4294967295
 8000778:	f7ff ff90 	bl	800069c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <SysTick_Config+0x40>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000782:	4b04      	ldr	r3, [pc, #16]	; (8000794 <SysTick_Config+0x40>)
 8000784:	2207      	movs	r2, #7
 8000786:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	e000e010 	.word	0xe000e010

08000798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f7ff ff49 	bl	8000638 <__NVIC_SetPriorityGrouping>
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b086      	sub	sp, #24
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	4603      	mov	r3, r0
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	607a      	str	r2, [r7, #4]
 80007ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c0:	f7ff ff5e 	bl	8000680 <__NVIC_GetPriorityGrouping>
 80007c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	68b9      	ldr	r1, [r7, #8]
 80007ca:	6978      	ldr	r0, [r7, #20]
 80007cc:	f7ff ff90 	bl	80006f0 <NVIC_EncodePriority>
 80007d0:	4602      	mov	r2, r0
 80007d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d6:	4611      	mov	r1, r2
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ff5f 	bl	800069c <__NVIC_SetPriority>
}
 80007de:	bf00      	nop
 80007e0:	3718      	adds	r7, #24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f7ff ffb0 	bl	8000754 <SysTick_Config>
 80007f4:	4603      	mov	r3, r0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d101      	bne.n	8000812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800080e:	2301      	movs	r3, #1
 8000810:	e272      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	2b00      	cmp	r3, #0
 800081c:	f000 8087 	beq.w	800092e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000820:	4b92      	ldr	r3, [pc, #584]	; (8000a6c <HAL_RCC_OscConfig+0x26c>)
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	f003 030c 	and.w	r3, r3, #12
 8000828:	2b04      	cmp	r3, #4
 800082a:	d00c      	beq.n	8000846 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800082c:	4b8f      	ldr	r3, [pc, #572]	; (8000a6c <HAL_RCC_OscConfig+0x26c>)
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	f003 030c 	and.w	r3, r3, #12
 8000834:	2b08      	cmp	r3, #8
 8000836:	d112      	bne.n	800085e <HAL_RCC_OscConfig+0x5e>
 8000838:	4b8c      	ldr	r3, [pc, #560]	; (8000a6c <HAL_RCC_OscConfig+0x26c>)
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000844:	d10b      	bne.n	800085e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000846:	4b89      	ldr	r3, [pc, #548]	; (8000a6c <HAL_RCC_OscConfig+0x26c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800084e:	2b00      	cmp	r3, #0
 8000850:	d06c      	beq.n	800092c <HAL_RCC_OscConfig+0x12c>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d168      	bne.n	800092c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800085a:	2301      	movs	r3, #1
 800085c:	e24c      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000866:	d106      	bne.n	8000876 <HAL_RCC_OscConfig+0x76>
 8000868:	4b80      	ldr	r3, [pc, #512]	; (8000a6c <HAL_RCC_OscConfig+0x26c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a7f      	ldr	r2, [pc, #508]	; (8000a6c <HAL_RCC_OscConfig+0x26c>)
 800086e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000872:	6013      	str	r3, [r2, #0]
 8000874:	e02e      	b.n	80008d4 <HAL_RCC_OscConfig+0xd4>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d10c      	bne.n	8000898 <HAL_RCC_OscConfig+0x98>
 800087e:	4b7b      	ldr	r3, [pc, #492]	; (8000a6c <HAL_RCC_OscConfig+0x26c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a7a      	ldr	r2, [pc, #488]	; (8000a6c <HAL_RCC_OscConfig+0x26c>)
 8000884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000888:	6013      	str	r3, [r2, #0]
 800088a:	4b78      	ldr	r3, [pc, #480]	; (8000a6c <HAL_RCC_OscConfig+0x26c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a77      	ldr	r2, [pc, #476]	; (8000a6c <HAL_RCC_OscConfig+0x26c>)
 8000890:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000894:	6013      	str	r3, [r2, #0]
 8000896:	e01d      	b.n	80008d4 <HAL_RCC_OscConfig+0xd4>
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008a0:	d10c      	bne.n	80008bc <HAL_RCC_OscConfig+0xbc>
 80008a2:	4b72      	ldr	r3, [pc, #456]	; (8000a6c <HAL_RCC_OscConfig+0x26c>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a71      	ldr	r2, [pc, #452]	; (8000a6c <HAL_RCC_OscConfig+0x26c>)
 80008a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008ac:	6013      	str	r3, [r2, #0]
 80008ae:	4b6f      	ldr	r3, [pc, #444]	; (8000a6c <HAL_RCC_OscConfig+0x26c>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a6e      	ldr	r2, [pc, #440]	; (8000a6c <HAL_RCC_OscConfig+0x26c>)
 80008b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008b8:	6013      	str	r3, [r2, #0]
 80008ba:	e00b      	b.n	80008d4 <HAL_RCC_OscConfig+0xd4>
 80008bc:	4b6b      	ldr	r3, [pc, #428]	; (8000a6c <HAL_RCC_OscConfig+0x26c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a6a      	ldr	r2, [pc, #424]	; (8000a6c <HAL_RCC_OscConfig+0x26c>)
 80008c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008c6:	6013      	str	r3, [r2, #0]
 80008c8:	4b68      	ldr	r3, [pc, #416]	; (8000a6c <HAL_RCC_OscConfig+0x26c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a67      	ldr	r2, [pc, #412]	; (8000a6c <HAL_RCC_OscConfig+0x26c>)
 80008ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d013      	beq.n	8000904 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008dc:	f7ff fe7e 	bl	80005dc <HAL_GetTick>
 80008e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008e2:	e008      	b.n	80008f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80008e4:	f7ff fe7a 	bl	80005dc <HAL_GetTick>
 80008e8:	4602      	mov	r2, r0
 80008ea:	693b      	ldr	r3, [r7, #16]
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	2b64      	cmp	r3, #100	; 0x64
 80008f0:	d901      	bls.n	80008f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80008f2:	2303      	movs	r3, #3
 80008f4:	e200      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008f6:	4b5d      	ldr	r3, [pc, #372]	; (8000a6c <HAL_RCC_OscConfig+0x26c>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d0f0      	beq.n	80008e4 <HAL_RCC_OscConfig+0xe4>
 8000902:	e014      	b.n	800092e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000904:	f7ff fe6a 	bl	80005dc <HAL_GetTick>
 8000908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800090a:	e008      	b.n	800091e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800090c:	f7ff fe66 	bl	80005dc <HAL_GetTick>
 8000910:	4602      	mov	r2, r0
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	2b64      	cmp	r3, #100	; 0x64
 8000918:	d901      	bls.n	800091e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800091a:	2303      	movs	r3, #3
 800091c:	e1ec      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800091e:	4b53      	ldr	r3, [pc, #332]	; (8000a6c <HAL_RCC_OscConfig+0x26c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000926:	2b00      	cmp	r3, #0
 8000928:	d1f0      	bne.n	800090c <HAL_RCC_OscConfig+0x10c>
 800092a:	e000      	b.n	800092e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800092c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f003 0302 	and.w	r3, r3, #2
 8000936:	2b00      	cmp	r3, #0
 8000938:	d063      	beq.n	8000a02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800093a:	4b4c      	ldr	r3, [pc, #304]	; (8000a6c <HAL_RCC_OscConfig+0x26c>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f003 030c 	and.w	r3, r3, #12
 8000942:	2b00      	cmp	r3, #0
 8000944:	d00b      	beq.n	800095e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000946:	4b49      	ldr	r3, [pc, #292]	; (8000a6c <HAL_RCC_OscConfig+0x26c>)
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	f003 030c 	and.w	r3, r3, #12
 800094e:	2b08      	cmp	r3, #8
 8000950:	d11c      	bne.n	800098c <HAL_RCC_OscConfig+0x18c>
 8000952:	4b46      	ldr	r3, [pc, #280]	; (8000a6c <HAL_RCC_OscConfig+0x26c>)
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800095a:	2b00      	cmp	r3, #0
 800095c:	d116      	bne.n	800098c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800095e:	4b43      	ldr	r3, [pc, #268]	; (8000a6c <HAL_RCC_OscConfig+0x26c>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f003 0302 	and.w	r3, r3, #2
 8000966:	2b00      	cmp	r3, #0
 8000968:	d005      	beq.n	8000976 <HAL_RCC_OscConfig+0x176>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	691b      	ldr	r3, [r3, #16]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d001      	beq.n	8000976 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	e1c0      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000976:	4b3d      	ldr	r3, [pc, #244]	; (8000a6c <HAL_RCC_OscConfig+0x26c>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	00db      	lsls	r3, r3, #3
 8000984:	4939      	ldr	r1, [pc, #228]	; (8000a6c <HAL_RCC_OscConfig+0x26c>)
 8000986:	4313      	orrs	r3, r2
 8000988:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800098a:	e03a      	b.n	8000a02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	691b      	ldr	r3, [r3, #16]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d020      	beq.n	80009d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000994:	4b36      	ldr	r3, [pc, #216]	; (8000a70 <HAL_RCC_OscConfig+0x270>)
 8000996:	2201      	movs	r2, #1
 8000998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800099a:	f7ff fe1f 	bl	80005dc <HAL_GetTick>
 800099e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009a0:	e008      	b.n	80009b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80009a2:	f7ff fe1b 	bl	80005dc <HAL_GetTick>
 80009a6:	4602      	mov	r2, r0
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	1ad3      	subs	r3, r2, r3
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d901      	bls.n	80009b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80009b0:	2303      	movs	r3, #3
 80009b2:	e1a1      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009b4:	4b2d      	ldr	r3, [pc, #180]	; (8000a6c <HAL_RCC_OscConfig+0x26c>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f003 0302 	and.w	r3, r3, #2
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d0f0      	beq.n	80009a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009c0:	4b2a      	ldr	r3, [pc, #168]	; (8000a6c <HAL_RCC_OscConfig+0x26c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	695b      	ldr	r3, [r3, #20]
 80009cc:	00db      	lsls	r3, r3, #3
 80009ce:	4927      	ldr	r1, [pc, #156]	; (8000a6c <HAL_RCC_OscConfig+0x26c>)
 80009d0:	4313      	orrs	r3, r2
 80009d2:	600b      	str	r3, [r1, #0]
 80009d4:	e015      	b.n	8000a02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80009d6:	4b26      	ldr	r3, [pc, #152]	; (8000a70 <HAL_RCC_OscConfig+0x270>)
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009dc:	f7ff fdfe 	bl	80005dc <HAL_GetTick>
 80009e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009e2:	e008      	b.n	80009f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80009e4:	f7ff fdfa 	bl	80005dc <HAL_GetTick>
 80009e8:	4602      	mov	r2, r0
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	2b02      	cmp	r3, #2
 80009f0:	d901      	bls.n	80009f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80009f2:	2303      	movs	r3, #3
 80009f4:	e180      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009f6:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <HAL_RCC_OscConfig+0x26c>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d1f0      	bne.n	80009e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d03a      	beq.n	8000a84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d019      	beq.n	8000a4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <HAL_RCC_OscConfig+0x274>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a1c:	f7ff fdde 	bl	80005dc <HAL_GetTick>
 8000a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a22:	e008      	b.n	8000a36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a24:	f7ff fdda 	bl	80005dc <HAL_GetTick>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d901      	bls.n	8000a36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000a32:	2303      	movs	r3, #3
 8000a34:	e160      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <HAL_RCC_OscConfig+0x26c>)
 8000a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d0f0      	beq.n	8000a24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000a42:	2001      	movs	r0, #1
 8000a44:	f000 fa9c 	bl	8000f80 <RCC_Delay>
 8000a48:	e01c      	b.n	8000a84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <HAL_RCC_OscConfig+0x274>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a50:	f7ff fdc4 	bl	80005dc <HAL_GetTick>
 8000a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a56:	e00f      	b.n	8000a78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a58:	f7ff fdc0 	bl	80005dc <HAL_GetTick>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d908      	bls.n	8000a78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000a66:	2303      	movs	r3, #3
 8000a68:	e146      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4f8>
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	42420000 	.word	0x42420000
 8000a74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a78:	4b92      	ldr	r3, [pc, #584]	; (8000cc4 <HAL_RCC_OscConfig+0x4c4>)
 8000a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a7c:	f003 0302 	and.w	r3, r3, #2
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d1e9      	bne.n	8000a58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f003 0304 	and.w	r3, r3, #4
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	f000 80a6 	beq.w	8000bde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a92:	2300      	movs	r3, #0
 8000a94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a96:	4b8b      	ldr	r3, [pc, #556]	; (8000cc4 <HAL_RCC_OscConfig+0x4c4>)
 8000a98:	69db      	ldr	r3, [r3, #28]
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d10d      	bne.n	8000abe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	4b88      	ldr	r3, [pc, #544]	; (8000cc4 <HAL_RCC_OscConfig+0x4c4>)
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	4a87      	ldr	r2, [pc, #540]	; (8000cc4 <HAL_RCC_OscConfig+0x4c4>)
 8000aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aac:	61d3      	str	r3, [r2, #28]
 8000aae:	4b85      	ldr	r3, [pc, #532]	; (8000cc4 <HAL_RCC_OscConfig+0x4c4>)
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000aba:	2301      	movs	r3, #1
 8000abc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000abe:	4b82      	ldr	r3, [pc, #520]	; (8000cc8 <HAL_RCC_OscConfig+0x4c8>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d118      	bne.n	8000afc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000aca:	4b7f      	ldr	r3, [pc, #508]	; (8000cc8 <HAL_RCC_OscConfig+0x4c8>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a7e      	ldr	r2, [pc, #504]	; (8000cc8 <HAL_RCC_OscConfig+0x4c8>)
 8000ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ad6:	f7ff fd81 	bl	80005dc <HAL_GetTick>
 8000ada:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000adc:	e008      	b.n	8000af0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ade:	f7ff fd7d 	bl	80005dc <HAL_GetTick>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	2b64      	cmp	r3, #100	; 0x64
 8000aea:	d901      	bls.n	8000af0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000aec:	2303      	movs	r3, #3
 8000aee:	e103      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000af0:	4b75      	ldr	r3, [pc, #468]	; (8000cc8 <HAL_RCC_OscConfig+0x4c8>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d0f0      	beq.n	8000ade <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d106      	bne.n	8000b12 <HAL_RCC_OscConfig+0x312>
 8000b04:	4b6f      	ldr	r3, [pc, #444]	; (8000cc4 <HAL_RCC_OscConfig+0x4c4>)
 8000b06:	6a1b      	ldr	r3, [r3, #32]
 8000b08:	4a6e      	ldr	r2, [pc, #440]	; (8000cc4 <HAL_RCC_OscConfig+0x4c4>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	6213      	str	r3, [r2, #32]
 8000b10:	e02d      	b.n	8000b6e <HAL_RCC_OscConfig+0x36e>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d10c      	bne.n	8000b34 <HAL_RCC_OscConfig+0x334>
 8000b1a:	4b6a      	ldr	r3, [pc, #424]	; (8000cc4 <HAL_RCC_OscConfig+0x4c4>)
 8000b1c:	6a1b      	ldr	r3, [r3, #32]
 8000b1e:	4a69      	ldr	r2, [pc, #420]	; (8000cc4 <HAL_RCC_OscConfig+0x4c4>)
 8000b20:	f023 0301 	bic.w	r3, r3, #1
 8000b24:	6213      	str	r3, [r2, #32]
 8000b26:	4b67      	ldr	r3, [pc, #412]	; (8000cc4 <HAL_RCC_OscConfig+0x4c4>)
 8000b28:	6a1b      	ldr	r3, [r3, #32]
 8000b2a:	4a66      	ldr	r2, [pc, #408]	; (8000cc4 <HAL_RCC_OscConfig+0x4c4>)
 8000b2c:	f023 0304 	bic.w	r3, r3, #4
 8000b30:	6213      	str	r3, [r2, #32]
 8000b32:	e01c      	b.n	8000b6e <HAL_RCC_OscConfig+0x36e>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	2b05      	cmp	r3, #5
 8000b3a:	d10c      	bne.n	8000b56 <HAL_RCC_OscConfig+0x356>
 8000b3c:	4b61      	ldr	r3, [pc, #388]	; (8000cc4 <HAL_RCC_OscConfig+0x4c4>)
 8000b3e:	6a1b      	ldr	r3, [r3, #32]
 8000b40:	4a60      	ldr	r2, [pc, #384]	; (8000cc4 <HAL_RCC_OscConfig+0x4c4>)
 8000b42:	f043 0304 	orr.w	r3, r3, #4
 8000b46:	6213      	str	r3, [r2, #32]
 8000b48:	4b5e      	ldr	r3, [pc, #376]	; (8000cc4 <HAL_RCC_OscConfig+0x4c4>)
 8000b4a:	6a1b      	ldr	r3, [r3, #32]
 8000b4c:	4a5d      	ldr	r2, [pc, #372]	; (8000cc4 <HAL_RCC_OscConfig+0x4c4>)
 8000b4e:	f043 0301 	orr.w	r3, r3, #1
 8000b52:	6213      	str	r3, [r2, #32]
 8000b54:	e00b      	b.n	8000b6e <HAL_RCC_OscConfig+0x36e>
 8000b56:	4b5b      	ldr	r3, [pc, #364]	; (8000cc4 <HAL_RCC_OscConfig+0x4c4>)
 8000b58:	6a1b      	ldr	r3, [r3, #32]
 8000b5a:	4a5a      	ldr	r2, [pc, #360]	; (8000cc4 <HAL_RCC_OscConfig+0x4c4>)
 8000b5c:	f023 0301 	bic.w	r3, r3, #1
 8000b60:	6213      	str	r3, [r2, #32]
 8000b62:	4b58      	ldr	r3, [pc, #352]	; (8000cc4 <HAL_RCC_OscConfig+0x4c4>)
 8000b64:	6a1b      	ldr	r3, [r3, #32]
 8000b66:	4a57      	ldr	r2, [pc, #348]	; (8000cc4 <HAL_RCC_OscConfig+0x4c4>)
 8000b68:	f023 0304 	bic.w	r3, r3, #4
 8000b6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d015      	beq.n	8000ba2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b76:	f7ff fd31 	bl	80005dc <HAL_GetTick>
 8000b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b7c:	e00a      	b.n	8000b94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b7e:	f7ff fd2d 	bl	80005dc <HAL_GetTick>
 8000b82:	4602      	mov	r2, r0
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d901      	bls.n	8000b94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000b90:	2303      	movs	r3, #3
 8000b92:	e0b1      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b94:	4b4b      	ldr	r3, [pc, #300]	; (8000cc4 <HAL_RCC_OscConfig+0x4c4>)
 8000b96:	6a1b      	ldr	r3, [r3, #32]
 8000b98:	f003 0302 	and.w	r3, r3, #2
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d0ee      	beq.n	8000b7e <HAL_RCC_OscConfig+0x37e>
 8000ba0:	e014      	b.n	8000bcc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ba2:	f7ff fd1b 	bl	80005dc <HAL_GetTick>
 8000ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ba8:	e00a      	b.n	8000bc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000baa:	f7ff fd17 	bl	80005dc <HAL_GetTick>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d901      	bls.n	8000bc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	e09b      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bc0:	4b40      	ldr	r3, [pc, #256]	; (8000cc4 <HAL_RCC_OscConfig+0x4c4>)
 8000bc2:	6a1b      	ldr	r3, [r3, #32]
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d1ee      	bne.n	8000baa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000bcc:	7dfb      	ldrb	r3, [r7, #23]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d105      	bne.n	8000bde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bd2:	4b3c      	ldr	r3, [pc, #240]	; (8000cc4 <HAL_RCC_OscConfig+0x4c4>)
 8000bd4:	69db      	ldr	r3, [r3, #28]
 8000bd6:	4a3b      	ldr	r2, [pc, #236]	; (8000cc4 <HAL_RCC_OscConfig+0x4c4>)
 8000bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000bdc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f000 8087 	beq.w	8000cf6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000be8:	4b36      	ldr	r3, [pc, #216]	; (8000cc4 <HAL_RCC_OscConfig+0x4c4>)
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f003 030c 	and.w	r3, r3, #12
 8000bf0:	2b08      	cmp	r3, #8
 8000bf2:	d061      	beq.n	8000cb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	69db      	ldr	r3, [r3, #28]
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d146      	bne.n	8000c8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bfc:	4b33      	ldr	r3, [pc, #204]	; (8000ccc <HAL_RCC_OscConfig+0x4cc>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c02:	f7ff fceb 	bl	80005dc <HAL_GetTick>
 8000c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c08:	e008      	b.n	8000c1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c0a:	f7ff fce7 	bl	80005dc <HAL_GetTick>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d901      	bls.n	8000c1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	e06d      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c1c:	4b29      	ldr	r3, [pc, #164]	; (8000cc4 <HAL_RCC_OscConfig+0x4c4>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d1f0      	bne.n	8000c0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6a1b      	ldr	r3, [r3, #32]
 8000c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c30:	d108      	bne.n	8000c44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c32:	4b24      	ldr	r3, [pc, #144]	; (8000cc4 <HAL_RCC_OscConfig+0x4c4>)
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	4921      	ldr	r1, [pc, #132]	; (8000cc4 <HAL_RCC_OscConfig+0x4c4>)
 8000c40:	4313      	orrs	r3, r2
 8000c42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c44:	4b1f      	ldr	r3, [pc, #124]	; (8000cc4 <HAL_RCC_OscConfig+0x4c4>)
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6a19      	ldr	r1, [r3, #32]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c54:	430b      	orrs	r3, r1
 8000c56:	491b      	ldr	r1, [pc, #108]	; (8000cc4 <HAL_RCC_OscConfig+0x4c4>)
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ccc <HAL_RCC_OscConfig+0x4cc>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c62:	f7ff fcbb 	bl	80005dc <HAL_GetTick>
 8000c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c68:	e008      	b.n	8000c7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c6a:	f7ff fcb7 	bl	80005dc <HAL_GetTick>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d901      	bls.n	8000c7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	e03d      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <HAL_RCC_OscConfig+0x4c4>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d0f0      	beq.n	8000c6a <HAL_RCC_OscConfig+0x46a>
 8000c88:	e035      	b.n	8000cf6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <HAL_RCC_OscConfig+0x4cc>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c90:	f7ff fca4 	bl	80005dc <HAL_GetTick>
 8000c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c96:	e008      	b.n	8000caa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c98:	f7ff fca0 	bl	80005dc <HAL_GetTick>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d901      	bls.n	8000caa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	e026      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_RCC_OscConfig+0x4c4>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d1f0      	bne.n	8000c98 <HAL_RCC_OscConfig+0x498>
 8000cb6:	e01e      	b.n	8000cf6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	69db      	ldr	r3, [r3, #28]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d107      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e019      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4f8>
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	40007000 	.word	0x40007000
 8000ccc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <HAL_RCC_OscConfig+0x500>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6a1b      	ldr	r3, [r3, #32]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d106      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d001      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e000      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000cf6:	2300      	movs	r3, #0
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40021000 	.word	0x40021000

08000d04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d101      	bne.n	8000d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	e0d0      	b.n	8000eba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000d18:	4b6a      	ldr	r3, [pc, #424]	; (8000ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f003 0307 	and.w	r3, r3, #7
 8000d20:	683a      	ldr	r2, [r7, #0]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d910      	bls.n	8000d48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d26:	4b67      	ldr	r3, [pc, #412]	; (8000ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f023 0207 	bic.w	r2, r3, #7
 8000d2e:	4965      	ldr	r1, [pc, #404]	; (8000ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d36:	4b63      	ldr	r3, [pc, #396]	; (8000ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	683a      	ldr	r2, [r7, #0]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d001      	beq.n	8000d48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	e0b8      	b.n	8000eba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d020      	beq.n	8000d96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f003 0304 	and.w	r3, r3, #4
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d005      	beq.n	8000d6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d60:	4b59      	ldr	r3, [pc, #356]	; (8000ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	4a58      	ldr	r2, [pc, #352]	; (8000ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000d6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f003 0308 	and.w	r3, r3, #8
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d005      	beq.n	8000d84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d78:	4b53      	ldr	r3, [pc, #332]	; (8000ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	4a52      	ldr	r2, [pc, #328]	; (8000ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000d82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d84:	4b50      	ldr	r3, [pc, #320]	; (8000ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	494d      	ldr	r1, [pc, #308]	; (8000ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d92:	4313      	orrs	r3, r2
 8000d94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d040      	beq.n	8000e24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d107      	bne.n	8000dba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000daa:	4b47      	ldr	r3, [pc, #284]	; (8000ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d115      	bne.n	8000de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e07f      	b.n	8000eba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d107      	bne.n	8000dd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dc2:	4b41      	ldr	r3, [pc, #260]	; (8000ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d109      	bne.n	8000de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e073      	b.n	8000eba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd2:	4b3d      	ldr	r3, [pc, #244]	; (8000ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e06b      	b.n	8000eba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000de2:	4b39      	ldr	r3, [pc, #228]	; (8000ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f023 0203 	bic.w	r2, r3, #3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	4936      	ldr	r1, [pc, #216]	; (8000ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8000df0:	4313      	orrs	r3, r2
 8000df2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000df4:	f7ff fbf2 	bl	80005dc <HAL_GetTick>
 8000df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dfa:	e00a      	b.n	8000e12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dfc:	f7ff fbee 	bl	80005dc <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d901      	bls.n	8000e12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e053      	b.n	8000eba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e12:	4b2d      	ldr	r3, [pc, #180]	; (8000ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 020c 	and.w	r2, r3, #12
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d1eb      	bne.n	8000dfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000e24:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 0307 	and.w	r3, r3, #7
 8000e2c:	683a      	ldr	r2, [r7, #0]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d210      	bcs.n	8000e54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e32:	4b24      	ldr	r3, [pc, #144]	; (8000ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f023 0207 	bic.w	r2, r3, #7
 8000e3a:	4922      	ldr	r1, [pc, #136]	; (8000ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e42:	4b20      	ldr	r3, [pc, #128]	; (8000ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	683a      	ldr	r2, [r7, #0]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d001      	beq.n	8000e54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e032      	b.n	8000eba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f003 0304 	and.w	r3, r3, #4
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d008      	beq.n	8000e72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e60:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	4916      	ldr	r1, [pc, #88]	; (8000ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d009      	beq.n	8000e92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	691b      	ldr	r3, [r3, #16]
 8000e8a:	00db      	lsls	r3, r3, #3
 8000e8c:	490e      	ldr	r1, [pc, #56]	; (8000ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e92:	f000 f821 	bl	8000ed8 <HAL_RCC_GetSysClockFreq>
 8000e96:	4602      	mov	r2, r0
 8000e98:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	091b      	lsrs	r3, r3, #4
 8000e9e:	f003 030f 	and.w	r3, r3, #15
 8000ea2:	490a      	ldr	r1, [pc, #40]	; (8000ecc <HAL_RCC_ClockConfig+0x1c8>)
 8000ea4:	5ccb      	ldrb	r3, [r1, r3]
 8000ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8000eaa:	4a09      	ldr	r2, [pc, #36]	; (8000ed0 <HAL_RCC_ClockConfig+0x1cc>)
 8000eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <HAL_RCC_ClockConfig+0x1d0>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fb50 	bl	8000558 <HAL_InitTick>

  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40022000 	.word	0x40022000
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	08002068 	.word	0x08002068
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	20000004 	.word	0x20000004

08000ed8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b087      	sub	sp, #28
 8000edc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <HAL_RCC_GetSysClockFreq+0x94>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f003 030c 	and.w	r3, r3, #12
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	d002      	beq.n	8000f08 <HAL_RCC_GetSysClockFreq+0x30>
 8000f02:	2b08      	cmp	r3, #8
 8000f04:	d003      	beq.n	8000f0e <HAL_RCC_GetSysClockFreq+0x36>
 8000f06:	e027      	b.n	8000f58 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000f08:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <HAL_RCC_GetSysClockFreq+0x98>)
 8000f0a:	613b      	str	r3, [r7, #16]
      break;
 8000f0c:	e027      	b.n	8000f5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	0c9b      	lsrs	r3, r3, #18
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	4a17      	ldr	r2, [pc, #92]	; (8000f74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000f18:	5cd3      	ldrb	r3, [r2, r3]
 8000f1a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d010      	beq.n	8000f48 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <HAL_RCC_GetSysClockFreq+0x94>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	0c5b      	lsrs	r3, r3, #17
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	4a11      	ldr	r2, [pc, #68]	; (8000f78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000f32:	5cd3      	ldrb	r3, [r2, r3]
 8000f34:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a0d      	ldr	r2, [pc, #52]	; (8000f70 <HAL_RCC_GetSysClockFreq+0x98>)
 8000f3a:	fb03 f202 	mul.w	r2, r3, r2
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	e004      	b.n	8000f52 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a0c      	ldr	r2, [pc, #48]	; (8000f7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8000f4c:	fb02 f303 	mul.w	r3, r2, r3
 8000f50:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	613b      	str	r3, [r7, #16]
      break;
 8000f56:	e002      	b.n	8000f5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <HAL_RCC_GetSysClockFreq+0x98>)
 8000f5a:	613b      	str	r3, [r7, #16]
      break;
 8000f5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000f5e:	693b      	ldr	r3, [r7, #16]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	371c      	adds	r7, #28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	007a1200 	.word	0x007a1200
 8000f74:	08002078 	.word	0x08002078
 8000f78:	08002088 	.word	0x08002088
 8000f7c:	003d0900 	.word	0x003d0900

08000f80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <RCC_Delay+0x34>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <RCC_Delay+0x38>)
 8000f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f92:	0a5b      	lsrs	r3, r3, #9
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	fb02 f303 	mul.w	r3, r2, r3
 8000f9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000f9c:	bf00      	nop
  }
  while (Delay --);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	1e5a      	subs	r2, r3, #1
 8000fa2:	60fa      	str	r2, [r7, #12]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1f9      	bne.n	8000f9c <RCC_Delay+0x1c>
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	10624dd3 	.word	0x10624dd3

08000fbc <__errno>:
 8000fbc:	4b01      	ldr	r3, [pc, #4]	; (8000fc4 <__errno+0x8>)
 8000fbe:	6818      	ldr	r0, [r3, #0]
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	2000000c 	.word	0x2000000c

08000fc8 <__libc_init_array>:
 8000fc8:	b570      	push	{r4, r5, r6, lr}
 8000fca:	2600      	movs	r6, #0
 8000fcc:	4d0c      	ldr	r5, [pc, #48]	; (8001000 <__libc_init_array+0x38>)
 8000fce:	4c0d      	ldr	r4, [pc, #52]	; (8001004 <__libc_init_array+0x3c>)
 8000fd0:	1b64      	subs	r4, r4, r5
 8000fd2:	10a4      	asrs	r4, r4, #2
 8000fd4:	42a6      	cmp	r6, r4
 8000fd6:	d109      	bne.n	8000fec <__libc_init_array+0x24>
 8000fd8:	f001 f82c 	bl	8002034 <_init>
 8000fdc:	2600      	movs	r6, #0
 8000fde:	4d0a      	ldr	r5, [pc, #40]	; (8001008 <__libc_init_array+0x40>)
 8000fe0:	4c0a      	ldr	r4, [pc, #40]	; (800100c <__libc_init_array+0x44>)
 8000fe2:	1b64      	subs	r4, r4, r5
 8000fe4:	10a4      	asrs	r4, r4, #2
 8000fe6:	42a6      	cmp	r6, r4
 8000fe8:	d105      	bne.n	8000ff6 <__libc_init_array+0x2e>
 8000fea:	bd70      	pop	{r4, r5, r6, pc}
 8000fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ff0:	4798      	blx	r3
 8000ff2:	3601      	adds	r6, #1
 8000ff4:	e7ee      	b.n	8000fd4 <__libc_init_array+0xc>
 8000ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ffa:	4798      	blx	r3
 8000ffc:	3601      	adds	r6, #1
 8000ffe:	e7f2      	b.n	8000fe6 <__libc_init_array+0x1e>
 8001000:	08002124 	.word	0x08002124
 8001004:	08002124 	.word	0x08002124
 8001008:	08002124 	.word	0x08002124
 800100c:	08002128 	.word	0x08002128

08001010 <memset>:
 8001010:	4603      	mov	r3, r0
 8001012:	4402      	add	r2, r0
 8001014:	4293      	cmp	r3, r2
 8001016:	d100      	bne.n	800101a <memset+0xa>
 8001018:	4770      	bx	lr
 800101a:	f803 1b01 	strb.w	r1, [r3], #1
 800101e:	e7f9      	b.n	8001014 <memset+0x4>

08001020 <iprintf>:
 8001020:	b40f      	push	{r0, r1, r2, r3}
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <iprintf+0x2c>)
 8001024:	b513      	push	{r0, r1, r4, lr}
 8001026:	681c      	ldr	r4, [r3, #0]
 8001028:	b124      	cbz	r4, 8001034 <iprintf+0x14>
 800102a:	69a3      	ldr	r3, [r4, #24]
 800102c:	b913      	cbnz	r3, 8001034 <iprintf+0x14>
 800102e:	4620      	mov	r0, r4
 8001030:	f000 fa5a 	bl	80014e8 <__sinit>
 8001034:	ab05      	add	r3, sp, #20
 8001036:	4620      	mov	r0, r4
 8001038:	9a04      	ldr	r2, [sp, #16]
 800103a:	68a1      	ldr	r1, [r4, #8]
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	f000 fc5d 	bl	80018fc <_vfiprintf_r>
 8001042:	b002      	add	sp, #8
 8001044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001048:	b004      	add	sp, #16
 800104a:	4770      	bx	lr
 800104c:	2000000c 	.word	0x2000000c

08001050 <_puts_r>:
 8001050:	b570      	push	{r4, r5, r6, lr}
 8001052:	460e      	mov	r6, r1
 8001054:	4605      	mov	r5, r0
 8001056:	b118      	cbz	r0, 8001060 <_puts_r+0x10>
 8001058:	6983      	ldr	r3, [r0, #24]
 800105a:	b90b      	cbnz	r3, 8001060 <_puts_r+0x10>
 800105c:	f000 fa44 	bl	80014e8 <__sinit>
 8001060:	69ab      	ldr	r3, [r5, #24]
 8001062:	68ac      	ldr	r4, [r5, #8]
 8001064:	b913      	cbnz	r3, 800106c <_puts_r+0x1c>
 8001066:	4628      	mov	r0, r5
 8001068:	f000 fa3e 	bl	80014e8 <__sinit>
 800106c:	4b2c      	ldr	r3, [pc, #176]	; (8001120 <_puts_r+0xd0>)
 800106e:	429c      	cmp	r4, r3
 8001070:	d120      	bne.n	80010b4 <_puts_r+0x64>
 8001072:	686c      	ldr	r4, [r5, #4]
 8001074:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001076:	07db      	lsls	r3, r3, #31
 8001078:	d405      	bmi.n	8001086 <_puts_r+0x36>
 800107a:	89a3      	ldrh	r3, [r4, #12]
 800107c:	0598      	lsls	r0, r3, #22
 800107e:	d402      	bmi.n	8001086 <_puts_r+0x36>
 8001080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001082:	f000 facf 	bl	8001624 <__retarget_lock_acquire_recursive>
 8001086:	89a3      	ldrh	r3, [r4, #12]
 8001088:	0719      	lsls	r1, r3, #28
 800108a:	d51d      	bpl.n	80010c8 <_puts_r+0x78>
 800108c:	6923      	ldr	r3, [r4, #16]
 800108e:	b1db      	cbz	r3, 80010c8 <_puts_r+0x78>
 8001090:	3e01      	subs	r6, #1
 8001092:	68a3      	ldr	r3, [r4, #8]
 8001094:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001098:	3b01      	subs	r3, #1
 800109a:	60a3      	str	r3, [r4, #8]
 800109c:	bb39      	cbnz	r1, 80010ee <_puts_r+0x9e>
 800109e:	2b00      	cmp	r3, #0
 80010a0:	da38      	bge.n	8001114 <_puts_r+0xc4>
 80010a2:	4622      	mov	r2, r4
 80010a4:	210a      	movs	r1, #10
 80010a6:	4628      	mov	r0, r5
 80010a8:	f000 f848 	bl	800113c <__swbuf_r>
 80010ac:	3001      	adds	r0, #1
 80010ae:	d011      	beq.n	80010d4 <_puts_r+0x84>
 80010b0:	250a      	movs	r5, #10
 80010b2:	e011      	b.n	80010d8 <_puts_r+0x88>
 80010b4:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <_puts_r+0xd4>)
 80010b6:	429c      	cmp	r4, r3
 80010b8:	d101      	bne.n	80010be <_puts_r+0x6e>
 80010ba:	68ac      	ldr	r4, [r5, #8]
 80010bc:	e7da      	b.n	8001074 <_puts_r+0x24>
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <_puts_r+0xd8>)
 80010c0:	429c      	cmp	r4, r3
 80010c2:	bf08      	it	eq
 80010c4:	68ec      	ldreq	r4, [r5, #12]
 80010c6:	e7d5      	b.n	8001074 <_puts_r+0x24>
 80010c8:	4621      	mov	r1, r4
 80010ca:	4628      	mov	r0, r5
 80010cc:	f000 f888 	bl	80011e0 <__swsetup_r>
 80010d0:	2800      	cmp	r0, #0
 80010d2:	d0dd      	beq.n	8001090 <_puts_r+0x40>
 80010d4:	f04f 35ff 	mov.w	r5, #4294967295
 80010d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80010da:	07da      	lsls	r2, r3, #31
 80010dc:	d405      	bmi.n	80010ea <_puts_r+0x9a>
 80010de:	89a3      	ldrh	r3, [r4, #12]
 80010e0:	059b      	lsls	r3, r3, #22
 80010e2:	d402      	bmi.n	80010ea <_puts_r+0x9a>
 80010e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80010e6:	f000 fa9e 	bl	8001626 <__retarget_lock_release_recursive>
 80010ea:	4628      	mov	r0, r5
 80010ec:	bd70      	pop	{r4, r5, r6, pc}
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	da04      	bge.n	80010fc <_puts_r+0xac>
 80010f2:	69a2      	ldr	r2, [r4, #24]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	dc06      	bgt.n	8001106 <_puts_r+0xb6>
 80010f8:	290a      	cmp	r1, #10
 80010fa:	d004      	beq.n	8001106 <_puts_r+0xb6>
 80010fc:	6823      	ldr	r3, [r4, #0]
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	6022      	str	r2, [r4, #0]
 8001102:	7019      	strb	r1, [r3, #0]
 8001104:	e7c5      	b.n	8001092 <_puts_r+0x42>
 8001106:	4622      	mov	r2, r4
 8001108:	4628      	mov	r0, r5
 800110a:	f000 f817 	bl	800113c <__swbuf_r>
 800110e:	3001      	adds	r0, #1
 8001110:	d1bf      	bne.n	8001092 <_puts_r+0x42>
 8001112:	e7df      	b.n	80010d4 <_puts_r+0x84>
 8001114:	250a      	movs	r5, #10
 8001116:	6823      	ldr	r3, [r4, #0]
 8001118:	1c5a      	adds	r2, r3, #1
 800111a:	6022      	str	r2, [r4, #0]
 800111c:	701d      	strb	r5, [r3, #0]
 800111e:	e7db      	b.n	80010d8 <_puts_r+0x88>
 8001120:	080020b0 	.word	0x080020b0
 8001124:	080020d0 	.word	0x080020d0
 8001128:	08002090 	.word	0x08002090

0800112c <puts>:
 800112c:	4b02      	ldr	r3, [pc, #8]	; (8001138 <puts+0xc>)
 800112e:	4601      	mov	r1, r0
 8001130:	6818      	ldr	r0, [r3, #0]
 8001132:	f7ff bf8d 	b.w	8001050 <_puts_r>
 8001136:	bf00      	nop
 8001138:	2000000c 	.word	0x2000000c

0800113c <__swbuf_r>:
 800113c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800113e:	460e      	mov	r6, r1
 8001140:	4614      	mov	r4, r2
 8001142:	4605      	mov	r5, r0
 8001144:	b118      	cbz	r0, 800114e <__swbuf_r+0x12>
 8001146:	6983      	ldr	r3, [r0, #24]
 8001148:	b90b      	cbnz	r3, 800114e <__swbuf_r+0x12>
 800114a:	f000 f9cd 	bl	80014e8 <__sinit>
 800114e:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <__swbuf_r+0x98>)
 8001150:	429c      	cmp	r4, r3
 8001152:	d12b      	bne.n	80011ac <__swbuf_r+0x70>
 8001154:	686c      	ldr	r4, [r5, #4]
 8001156:	69a3      	ldr	r3, [r4, #24]
 8001158:	60a3      	str	r3, [r4, #8]
 800115a:	89a3      	ldrh	r3, [r4, #12]
 800115c:	071a      	lsls	r2, r3, #28
 800115e:	d52f      	bpl.n	80011c0 <__swbuf_r+0x84>
 8001160:	6923      	ldr	r3, [r4, #16]
 8001162:	b36b      	cbz	r3, 80011c0 <__swbuf_r+0x84>
 8001164:	6923      	ldr	r3, [r4, #16]
 8001166:	6820      	ldr	r0, [r4, #0]
 8001168:	b2f6      	uxtb	r6, r6
 800116a:	1ac0      	subs	r0, r0, r3
 800116c:	6963      	ldr	r3, [r4, #20]
 800116e:	4637      	mov	r7, r6
 8001170:	4283      	cmp	r3, r0
 8001172:	dc04      	bgt.n	800117e <__swbuf_r+0x42>
 8001174:	4621      	mov	r1, r4
 8001176:	4628      	mov	r0, r5
 8001178:	f000 f922 	bl	80013c0 <_fflush_r>
 800117c:	bb30      	cbnz	r0, 80011cc <__swbuf_r+0x90>
 800117e:	68a3      	ldr	r3, [r4, #8]
 8001180:	3001      	adds	r0, #1
 8001182:	3b01      	subs	r3, #1
 8001184:	60a3      	str	r3, [r4, #8]
 8001186:	6823      	ldr	r3, [r4, #0]
 8001188:	1c5a      	adds	r2, r3, #1
 800118a:	6022      	str	r2, [r4, #0]
 800118c:	701e      	strb	r6, [r3, #0]
 800118e:	6963      	ldr	r3, [r4, #20]
 8001190:	4283      	cmp	r3, r0
 8001192:	d004      	beq.n	800119e <__swbuf_r+0x62>
 8001194:	89a3      	ldrh	r3, [r4, #12]
 8001196:	07db      	lsls	r3, r3, #31
 8001198:	d506      	bpl.n	80011a8 <__swbuf_r+0x6c>
 800119a:	2e0a      	cmp	r6, #10
 800119c:	d104      	bne.n	80011a8 <__swbuf_r+0x6c>
 800119e:	4621      	mov	r1, r4
 80011a0:	4628      	mov	r0, r5
 80011a2:	f000 f90d 	bl	80013c0 <_fflush_r>
 80011a6:	b988      	cbnz	r0, 80011cc <__swbuf_r+0x90>
 80011a8:	4638      	mov	r0, r7
 80011aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <__swbuf_r+0x9c>)
 80011ae:	429c      	cmp	r4, r3
 80011b0:	d101      	bne.n	80011b6 <__swbuf_r+0x7a>
 80011b2:	68ac      	ldr	r4, [r5, #8]
 80011b4:	e7cf      	b.n	8001156 <__swbuf_r+0x1a>
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <__swbuf_r+0xa0>)
 80011b8:	429c      	cmp	r4, r3
 80011ba:	bf08      	it	eq
 80011bc:	68ec      	ldreq	r4, [r5, #12]
 80011be:	e7ca      	b.n	8001156 <__swbuf_r+0x1a>
 80011c0:	4621      	mov	r1, r4
 80011c2:	4628      	mov	r0, r5
 80011c4:	f000 f80c 	bl	80011e0 <__swsetup_r>
 80011c8:	2800      	cmp	r0, #0
 80011ca:	d0cb      	beq.n	8001164 <__swbuf_r+0x28>
 80011cc:	f04f 37ff 	mov.w	r7, #4294967295
 80011d0:	e7ea      	b.n	80011a8 <__swbuf_r+0x6c>
 80011d2:	bf00      	nop
 80011d4:	080020b0 	.word	0x080020b0
 80011d8:	080020d0 	.word	0x080020d0
 80011dc:	08002090 	.word	0x08002090

080011e0 <__swsetup_r>:
 80011e0:	4b32      	ldr	r3, [pc, #200]	; (80012ac <__swsetup_r+0xcc>)
 80011e2:	b570      	push	{r4, r5, r6, lr}
 80011e4:	681d      	ldr	r5, [r3, #0]
 80011e6:	4606      	mov	r6, r0
 80011e8:	460c      	mov	r4, r1
 80011ea:	b125      	cbz	r5, 80011f6 <__swsetup_r+0x16>
 80011ec:	69ab      	ldr	r3, [r5, #24]
 80011ee:	b913      	cbnz	r3, 80011f6 <__swsetup_r+0x16>
 80011f0:	4628      	mov	r0, r5
 80011f2:	f000 f979 	bl	80014e8 <__sinit>
 80011f6:	4b2e      	ldr	r3, [pc, #184]	; (80012b0 <__swsetup_r+0xd0>)
 80011f8:	429c      	cmp	r4, r3
 80011fa:	d10f      	bne.n	800121c <__swsetup_r+0x3c>
 80011fc:	686c      	ldr	r4, [r5, #4]
 80011fe:	89a3      	ldrh	r3, [r4, #12]
 8001200:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001204:	0719      	lsls	r1, r3, #28
 8001206:	d42c      	bmi.n	8001262 <__swsetup_r+0x82>
 8001208:	06dd      	lsls	r5, r3, #27
 800120a:	d411      	bmi.n	8001230 <__swsetup_r+0x50>
 800120c:	2309      	movs	r3, #9
 800120e:	6033      	str	r3, [r6, #0]
 8001210:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001214:	f04f 30ff 	mov.w	r0, #4294967295
 8001218:	81a3      	strh	r3, [r4, #12]
 800121a:	e03e      	b.n	800129a <__swsetup_r+0xba>
 800121c:	4b25      	ldr	r3, [pc, #148]	; (80012b4 <__swsetup_r+0xd4>)
 800121e:	429c      	cmp	r4, r3
 8001220:	d101      	bne.n	8001226 <__swsetup_r+0x46>
 8001222:	68ac      	ldr	r4, [r5, #8]
 8001224:	e7eb      	b.n	80011fe <__swsetup_r+0x1e>
 8001226:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <__swsetup_r+0xd8>)
 8001228:	429c      	cmp	r4, r3
 800122a:	bf08      	it	eq
 800122c:	68ec      	ldreq	r4, [r5, #12]
 800122e:	e7e6      	b.n	80011fe <__swsetup_r+0x1e>
 8001230:	0758      	lsls	r0, r3, #29
 8001232:	d512      	bpl.n	800125a <__swsetup_r+0x7a>
 8001234:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001236:	b141      	cbz	r1, 800124a <__swsetup_r+0x6a>
 8001238:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800123c:	4299      	cmp	r1, r3
 800123e:	d002      	beq.n	8001246 <__swsetup_r+0x66>
 8001240:	4630      	mov	r0, r6
 8001242:	f000 fa57 	bl	80016f4 <_free_r>
 8001246:	2300      	movs	r3, #0
 8001248:	6363      	str	r3, [r4, #52]	; 0x34
 800124a:	89a3      	ldrh	r3, [r4, #12]
 800124c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001250:	81a3      	strh	r3, [r4, #12]
 8001252:	2300      	movs	r3, #0
 8001254:	6063      	str	r3, [r4, #4]
 8001256:	6923      	ldr	r3, [r4, #16]
 8001258:	6023      	str	r3, [r4, #0]
 800125a:	89a3      	ldrh	r3, [r4, #12]
 800125c:	f043 0308 	orr.w	r3, r3, #8
 8001260:	81a3      	strh	r3, [r4, #12]
 8001262:	6923      	ldr	r3, [r4, #16]
 8001264:	b94b      	cbnz	r3, 800127a <__swsetup_r+0x9a>
 8001266:	89a3      	ldrh	r3, [r4, #12]
 8001268:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800126c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001270:	d003      	beq.n	800127a <__swsetup_r+0x9a>
 8001272:	4621      	mov	r1, r4
 8001274:	4630      	mov	r0, r6
 8001276:	f000 f9fd 	bl	8001674 <__smakebuf_r>
 800127a:	89a0      	ldrh	r0, [r4, #12]
 800127c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001280:	f010 0301 	ands.w	r3, r0, #1
 8001284:	d00a      	beq.n	800129c <__swsetup_r+0xbc>
 8001286:	2300      	movs	r3, #0
 8001288:	60a3      	str	r3, [r4, #8]
 800128a:	6963      	ldr	r3, [r4, #20]
 800128c:	425b      	negs	r3, r3
 800128e:	61a3      	str	r3, [r4, #24]
 8001290:	6923      	ldr	r3, [r4, #16]
 8001292:	b943      	cbnz	r3, 80012a6 <__swsetup_r+0xc6>
 8001294:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001298:	d1ba      	bne.n	8001210 <__swsetup_r+0x30>
 800129a:	bd70      	pop	{r4, r5, r6, pc}
 800129c:	0781      	lsls	r1, r0, #30
 800129e:	bf58      	it	pl
 80012a0:	6963      	ldrpl	r3, [r4, #20]
 80012a2:	60a3      	str	r3, [r4, #8]
 80012a4:	e7f4      	b.n	8001290 <__swsetup_r+0xb0>
 80012a6:	2000      	movs	r0, #0
 80012a8:	e7f7      	b.n	800129a <__swsetup_r+0xba>
 80012aa:	bf00      	nop
 80012ac:	2000000c 	.word	0x2000000c
 80012b0:	080020b0 	.word	0x080020b0
 80012b4:	080020d0 	.word	0x080020d0
 80012b8:	08002090 	.word	0x08002090

080012bc <__sflush_r>:
 80012bc:	898a      	ldrh	r2, [r1, #12]
 80012be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012c0:	4605      	mov	r5, r0
 80012c2:	0710      	lsls	r0, r2, #28
 80012c4:	460c      	mov	r4, r1
 80012c6:	d457      	bmi.n	8001378 <__sflush_r+0xbc>
 80012c8:	684b      	ldr	r3, [r1, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	dc04      	bgt.n	80012d8 <__sflush_r+0x1c>
 80012ce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	dc01      	bgt.n	80012d8 <__sflush_r+0x1c>
 80012d4:	2000      	movs	r0, #0
 80012d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012da:	2e00      	cmp	r6, #0
 80012dc:	d0fa      	beq.n	80012d4 <__sflush_r+0x18>
 80012de:	2300      	movs	r3, #0
 80012e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80012e4:	682f      	ldr	r7, [r5, #0]
 80012e6:	602b      	str	r3, [r5, #0]
 80012e8:	d032      	beq.n	8001350 <__sflush_r+0x94>
 80012ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80012ec:	89a3      	ldrh	r3, [r4, #12]
 80012ee:	075a      	lsls	r2, r3, #29
 80012f0:	d505      	bpl.n	80012fe <__sflush_r+0x42>
 80012f2:	6863      	ldr	r3, [r4, #4]
 80012f4:	1ac0      	subs	r0, r0, r3
 80012f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012f8:	b10b      	cbz	r3, 80012fe <__sflush_r+0x42>
 80012fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012fc:	1ac0      	subs	r0, r0, r3
 80012fe:	2300      	movs	r3, #0
 8001300:	4602      	mov	r2, r0
 8001302:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001304:	4628      	mov	r0, r5
 8001306:	6a21      	ldr	r1, [r4, #32]
 8001308:	47b0      	blx	r6
 800130a:	1c43      	adds	r3, r0, #1
 800130c:	89a3      	ldrh	r3, [r4, #12]
 800130e:	d106      	bne.n	800131e <__sflush_r+0x62>
 8001310:	6829      	ldr	r1, [r5, #0]
 8001312:	291d      	cmp	r1, #29
 8001314:	d82c      	bhi.n	8001370 <__sflush_r+0xb4>
 8001316:	4a29      	ldr	r2, [pc, #164]	; (80013bc <__sflush_r+0x100>)
 8001318:	40ca      	lsrs	r2, r1
 800131a:	07d6      	lsls	r6, r2, #31
 800131c:	d528      	bpl.n	8001370 <__sflush_r+0xb4>
 800131e:	2200      	movs	r2, #0
 8001320:	6062      	str	r2, [r4, #4]
 8001322:	6922      	ldr	r2, [r4, #16]
 8001324:	04d9      	lsls	r1, r3, #19
 8001326:	6022      	str	r2, [r4, #0]
 8001328:	d504      	bpl.n	8001334 <__sflush_r+0x78>
 800132a:	1c42      	adds	r2, r0, #1
 800132c:	d101      	bne.n	8001332 <__sflush_r+0x76>
 800132e:	682b      	ldr	r3, [r5, #0]
 8001330:	b903      	cbnz	r3, 8001334 <__sflush_r+0x78>
 8001332:	6560      	str	r0, [r4, #84]	; 0x54
 8001334:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001336:	602f      	str	r7, [r5, #0]
 8001338:	2900      	cmp	r1, #0
 800133a:	d0cb      	beq.n	80012d4 <__sflush_r+0x18>
 800133c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001340:	4299      	cmp	r1, r3
 8001342:	d002      	beq.n	800134a <__sflush_r+0x8e>
 8001344:	4628      	mov	r0, r5
 8001346:	f000 f9d5 	bl	80016f4 <_free_r>
 800134a:	2000      	movs	r0, #0
 800134c:	6360      	str	r0, [r4, #52]	; 0x34
 800134e:	e7c2      	b.n	80012d6 <__sflush_r+0x1a>
 8001350:	6a21      	ldr	r1, [r4, #32]
 8001352:	2301      	movs	r3, #1
 8001354:	4628      	mov	r0, r5
 8001356:	47b0      	blx	r6
 8001358:	1c41      	adds	r1, r0, #1
 800135a:	d1c7      	bne.n	80012ec <__sflush_r+0x30>
 800135c:	682b      	ldr	r3, [r5, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0c4      	beq.n	80012ec <__sflush_r+0x30>
 8001362:	2b1d      	cmp	r3, #29
 8001364:	d001      	beq.n	800136a <__sflush_r+0xae>
 8001366:	2b16      	cmp	r3, #22
 8001368:	d101      	bne.n	800136e <__sflush_r+0xb2>
 800136a:	602f      	str	r7, [r5, #0]
 800136c:	e7b2      	b.n	80012d4 <__sflush_r+0x18>
 800136e:	89a3      	ldrh	r3, [r4, #12]
 8001370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001374:	81a3      	strh	r3, [r4, #12]
 8001376:	e7ae      	b.n	80012d6 <__sflush_r+0x1a>
 8001378:	690f      	ldr	r7, [r1, #16]
 800137a:	2f00      	cmp	r7, #0
 800137c:	d0aa      	beq.n	80012d4 <__sflush_r+0x18>
 800137e:	0793      	lsls	r3, r2, #30
 8001380:	bf18      	it	ne
 8001382:	2300      	movne	r3, #0
 8001384:	680e      	ldr	r6, [r1, #0]
 8001386:	bf08      	it	eq
 8001388:	694b      	ldreq	r3, [r1, #20]
 800138a:	1bf6      	subs	r6, r6, r7
 800138c:	600f      	str	r7, [r1, #0]
 800138e:	608b      	str	r3, [r1, #8]
 8001390:	2e00      	cmp	r6, #0
 8001392:	dd9f      	ble.n	80012d4 <__sflush_r+0x18>
 8001394:	4633      	mov	r3, r6
 8001396:	463a      	mov	r2, r7
 8001398:	4628      	mov	r0, r5
 800139a:	6a21      	ldr	r1, [r4, #32]
 800139c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80013a0:	47e0      	blx	ip
 80013a2:	2800      	cmp	r0, #0
 80013a4:	dc06      	bgt.n	80013b4 <__sflush_r+0xf8>
 80013a6:	89a3      	ldrh	r3, [r4, #12]
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013b0:	81a3      	strh	r3, [r4, #12]
 80013b2:	e790      	b.n	80012d6 <__sflush_r+0x1a>
 80013b4:	4407      	add	r7, r0
 80013b6:	1a36      	subs	r6, r6, r0
 80013b8:	e7ea      	b.n	8001390 <__sflush_r+0xd4>
 80013ba:	bf00      	nop
 80013bc:	20400001 	.word	0x20400001

080013c0 <_fflush_r>:
 80013c0:	b538      	push	{r3, r4, r5, lr}
 80013c2:	690b      	ldr	r3, [r1, #16]
 80013c4:	4605      	mov	r5, r0
 80013c6:	460c      	mov	r4, r1
 80013c8:	b913      	cbnz	r3, 80013d0 <_fflush_r+0x10>
 80013ca:	2500      	movs	r5, #0
 80013cc:	4628      	mov	r0, r5
 80013ce:	bd38      	pop	{r3, r4, r5, pc}
 80013d0:	b118      	cbz	r0, 80013da <_fflush_r+0x1a>
 80013d2:	6983      	ldr	r3, [r0, #24]
 80013d4:	b90b      	cbnz	r3, 80013da <_fflush_r+0x1a>
 80013d6:	f000 f887 	bl	80014e8 <__sinit>
 80013da:	4b14      	ldr	r3, [pc, #80]	; (800142c <_fflush_r+0x6c>)
 80013dc:	429c      	cmp	r4, r3
 80013de:	d11b      	bne.n	8001418 <_fflush_r+0x58>
 80013e0:	686c      	ldr	r4, [r5, #4]
 80013e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0ef      	beq.n	80013ca <_fflush_r+0xa>
 80013ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80013ec:	07d0      	lsls	r0, r2, #31
 80013ee:	d404      	bmi.n	80013fa <_fflush_r+0x3a>
 80013f0:	0599      	lsls	r1, r3, #22
 80013f2:	d402      	bmi.n	80013fa <_fflush_r+0x3a>
 80013f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013f6:	f000 f915 	bl	8001624 <__retarget_lock_acquire_recursive>
 80013fa:	4628      	mov	r0, r5
 80013fc:	4621      	mov	r1, r4
 80013fe:	f7ff ff5d 	bl	80012bc <__sflush_r>
 8001402:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001404:	4605      	mov	r5, r0
 8001406:	07da      	lsls	r2, r3, #31
 8001408:	d4e0      	bmi.n	80013cc <_fflush_r+0xc>
 800140a:	89a3      	ldrh	r3, [r4, #12]
 800140c:	059b      	lsls	r3, r3, #22
 800140e:	d4dd      	bmi.n	80013cc <_fflush_r+0xc>
 8001410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001412:	f000 f908 	bl	8001626 <__retarget_lock_release_recursive>
 8001416:	e7d9      	b.n	80013cc <_fflush_r+0xc>
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <_fflush_r+0x70>)
 800141a:	429c      	cmp	r4, r3
 800141c:	d101      	bne.n	8001422 <_fflush_r+0x62>
 800141e:	68ac      	ldr	r4, [r5, #8]
 8001420:	e7df      	b.n	80013e2 <_fflush_r+0x22>
 8001422:	4b04      	ldr	r3, [pc, #16]	; (8001434 <_fflush_r+0x74>)
 8001424:	429c      	cmp	r4, r3
 8001426:	bf08      	it	eq
 8001428:	68ec      	ldreq	r4, [r5, #12]
 800142a:	e7da      	b.n	80013e2 <_fflush_r+0x22>
 800142c:	080020b0 	.word	0x080020b0
 8001430:	080020d0 	.word	0x080020d0
 8001434:	08002090 	.word	0x08002090

08001438 <std>:
 8001438:	2300      	movs	r3, #0
 800143a:	b510      	push	{r4, lr}
 800143c:	4604      	mov	r4, r0
 800143e:	e9c0 3300 	strd	r3, r3, [r0]
 8001442:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001446:	6083      	str	r3, [r0, #8]
 8001448:	8181      	strh	r1, [r0, #12]
 800144a:	6643      	str	r3, [r0, #100]	; 0x64
 800144c:	81c2      	strh	r2, [r0, #14]
 800144e:	6183      	str	r3, [r0, #24]
 8001450:	4619      	mov	r1, r3
 8001452:	2208      	movs	r2, #8
 8001454:	305c      	adds	r0, #92	; 0x5c
 8001456:	f7ff fddb 	bl	8001010 <memset>
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <std+0x38>)
 800145c:	6224      	str	r4, [r4, #32]
 800145e:	6263      	str	r3, [r4, #36]	; 0x24
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <std+0x3c>)
 8001462:	62a3      	str	r3, [r4, #40]	; 0x28
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <std+0x40>)
 8001466:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <std+0x44>)
 800146a:	6323      	str	r3, [r4, #48]	; 0x30
 800146c:	bd10      	pop	{r4, pc}
 800146e:	bf00      	nop
 8001470:	08001ea9 	.word	0x08001ea9
 8001474:	08001ecb 	.word	0x08001ecb
 8001478:	08001f03 	.word	0x08001f03
 800147c:	08001f27 	.word	0x08001f27

08001480 <_cleanup_r>:
 8001480:	4901      	ldr	r1, [pc, #4]	; (8001488 <_cleanup_r+0x8>)
 8001482:	f000 b8af 	b.w	80015e4 <_fwalk_reent>
 8001486:	bf00      	nop
 8001488:	080013c1 	.word	0x080013c1

0800148c <__sfmoreglue>:
 800148c:	2268      	movs	r2, #104	; 0x68
 800148e:	b570      	push	{r4, r5, r6, lr}
 8001490:	1e4d      	subs	r5, r1, #1
 8001492:	4355      	muls	r5, r2
 8001494:	460e      	mov	r6, r1
 8001496:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800149a:	f000 f993 	bl	80017c4 <_malloc_r>
 800149e:	4604      	mov	r4, r0
 80014a0:	b140      	cbz	r0, 80014b4 <__sfmoreglue+0x28>
 80014a2:	2100      	movs	r1, #0
 80014a4:	e9c0 1600 	strd	r1, r6, [r0]
 80014a8:	300c      	adds	r0, #12
 80014aa:	60a0      	str	r0, [r4, #8]
 80014ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80014b0:	f7ff fdae 	bl	8001010 <memset>
 80014b4:	4620      	mov	r0, r4
 80014b6:	bd70      	pop	{r4, r5, r6, pc}

080014b8 <__sfp_lock_acquire>:
 80014b8:	4801      	ldr	r0, [pc, #4]	; (80014c0 <__sfp_lock_acquire+0x8>)
 80014ba:	f000 b8b3 	b.w	8001624 <__retarget_lock_acquire_recursive>
 80014be:	bf00      	nop
 80014c0:	20000099 	.word	0x20000099

080014c4 <__sfp_lock_release>:
 80014c4:	4801      	ldr	r0, [pc, #4]	; (80014cc <__sfp_lock_release+0x8>)
 80014c6:	f000 b8ae 	b.w	8001626 <__retarget_lock_release_recursive>
 80014ca:	bf00      	nop
 80014cc:	20000099 	.word	0x20000099

080014d0 <__sinit_lock_acquire>:
 80014d0:	4801      	ldr	r0, [pc, #4]	; (80014d8 <__sinit_lock_acquire+0x8>)
 80014d2:	f000 b8a7 	b.w	8001624 <__retarget_lock_acquire_recursive>
 80014d6:	bf00      	nop
 80014d8:	2000009a 	.word	0x2000009a

080014dc <__sinit_lock_release>:
 80014dc:	4801      	ldr	r0, [pc, #4]	; (80014e4 <__sinit_lock_release+0x8>)
 80014de:	f000 b8a2 	b.w	8001626 <__retarget_lock_release_recursive>
 80014e2:	bf00      	nop
 80014e4:	2000009a 	.word	0x2000009a

080014e8 <__sinit>:
 80014e8:	b510      	push	{r4, lr}
 80014ea:	4604      	mov	r4, r0
 80014ec:	f7ff fff0 	bl	80014d0 <__sinit_lock_acquire>
 80014f0:	69a3      	ldr	r3, [r4, #24]
 80014f2:	b11b      	cbz	r3, 80014fc <__sinit+0x14>
 80014f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014f8:	f7ff bff0 	b.w	80014dc <__sinit_lock_release>
 80014fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001500:	6523      	str	r3, [r4, #80]	; 0x50
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <__sinit+0x68>)
 8001504:	4a13      	ldr	r2, [pc, #76]	; (8001554 <__sinit+0x6c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	62a2      	str	r2, [r4, #40]	; 0x28
 800150a:	42a3      	cmp	r3, r4
 800150c:	bf08      	it	eq
 800150e:	2301      	moveq	r3, #1
 8001510:	4620      	mov	r0, r4
 8001512:	bf08      	it	eq
 8001514:	61a3      	streq	r3, [r4, #24]
 8001516:	f000 f81f 	bl	8001558 <__sfp>
 800151a:	6060      	str	r0, [r4, #4]
 800151c:	4620      	mov	r0, r4
 800151e:	f000 f81b 	bl	8001558 <__sfp>
 8001522:	60a0      	str	r0, [r4, #8]
 8001524:	4620      	mov	r0, r4
 8001526:	f000 f817 	bl	8001558 <__sfp>
 800152a:	2200      	movs	r2, #0
 800152c:	2104      	movs	r1, #4
 800152e:	60e0      	str	r0, [r4, #12]
 8001530:	6860      	ldr	r0, [r4, #4]
 8001532:	f7ff ff81 	bl	8001438 <std>
 8001536:	2201      	movs	r2, #1
 8001538:	2109      	movs	r1, #9
 800153a:	68a0      	ldr	r0, [r4, #8]
 800153c:	f7ff ff7c 	bl	8001438 <std>
 8001540:	2202      	movs	r2, #2
 8001542:	2112      	movs	r1, #18
 8001544:	68e0      	ldr	r0, [r4, #12]
 8001546:	f7ff ff77 	bl	8001438 <std>
 800154a:	2301      	movs	r3, #1
 800154c:	61a3      	str	r3, [r4, #24]
 800154e:	e7d1      	b.n	80014f4 <__sinit+0xc>
 8001550:	0800208c 	.word	0x0800208c
 8001554:	08001481 	.word	0x08001481

08001558 <__sfp>:
 8001558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800155a:	4607      	mov	r7, r0
 800155c:	f7ff ffac 	bl	80014b8 <__sfp_lock_acquire>
 8001560:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <__sfp+0x84>)
 8001562:	681e      	ldr	r6, [r3, #0]
 8001564:	69b3      	ldr	r3, [r6, #24]
 8001566:	b913      	cbnz	r3, 800156e <__sfp+0x16>
 8001568:	4630      	mov	r0, r6
 800156a:	f7ff ffbd 	bl	80014e8 <__sinit>
 800156e:	3648      	adds	r6, #72	; 0x48
 8001570:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001574:	3b01      	subs	r3, #1
 8001576:	d503      	bpl.n	8001580 <__sfp+0x28>
 8001578:	6833      	ldr	r3, [r6, #0]
 800157a:	b30b      	cbz	r3, 80015c0 <__sfp+0x68>
 800157c:	6836      	ldr	r6, [r6, #0]
 800157e:	e7f7      	b.n	8001570 <__sfp+0x18>
 8001580:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001584:	b9d5      	cbnz	r5, 80015bc <__sfp+0x64>
 8001586:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <__sfp+0x88>)
 8001588:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800158c:	60e3      	str	r3, [r4, #12]
 800158e:	6665      	str	r5, [r4, #100]	; 0x64
 8001590:	f000 f847 	bl	8001622 <__retarget_lock_init_recursive>
 8001594:	f7ff ff96 	bl	80014c4 <__sfp_lock_release>
 8001598:	2208      	movs	r2, #8
 800159a:	4629      	mov	r1, r5
 800159c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80015a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80015a4:	6025      	str	r5, [r4, #0]
 80015a6:	61a5      	str	r5, [r4, #24]
 80015a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80015ac:	f7ff fd30 	bl	8001010 <memset>
 80015b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80015b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80015b8:	4620      	mov	r0, r4
 80015ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015bc:	3468      	adds	r4, #104	; 0x68
 80015be:	e7d9      	b.n	8001574 <__sfp+0x1c>
 80015c0:	2104      	movs	r1, #4
 80015c2:	4638      	mov	r0, r7
 80015c4:	f7ff ff62 	bl	800148c <__sfmoreglue>
 80015c8:	4604      	mov	r4, r0
 80015ca:	6030      	str	r0, [r6, #0]
 80015cc:	2800      	cmp	r0, #0
 80015ce:	d1d5      	bne.n	800157c <__sfp+0x24>
 80015d0:	f7ff ff78 	bl	80014c4 <__sfp_lock_release>
 80015d4:	230c      	movs	r3, #12
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	e7ee      	b.n	80015b8 <__sfp+0x60>
 80015da:	bf00      	nop
 80015dc:	0800208c 	.word	0x0800208c
 80015e0:	ffff0001 	.word	0xffff0001

080015e4 <_fwalk_reent>:
 80015e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015e8:	4606      	mov	r6, r0
 80015ea:	4688      	mov	r8, r1
 80015ec:	2700      	movs	r7, #0
 80015ee:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80015f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80015f6:	f1b9 0901 	subs.w	r9, r9, #1
 80015fa:	d505      	bpl.n	8001608 <_fwalk_reent+0x24>
 80015fc:	6824      	ldr	r4, [r4, #0]
 80015fe:	2c00      	cmp	r4, #0
 8001600:	d1f7      	bne.n	80015f2 <_fwalk_reent+0xe>
 8001602:	4638      	mov	r0, r7
 8001604:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001608:	89ab      	ldrh	r3, [r5, #12]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d907      	bls.n	800161e <_fwalk_reent+0x3a>
 800160e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001612:	3301      	adds	r3, #1
 8001614:	d003      	beq.n	800161e <_fwalk_reent+0x3a>
 8001616:	4629      	mov	r1, r5
 8001618:	4630      	mov	r0, r6
 800161a:	47c0      	blx	r8
 800161c:	4307      	orrs	r7, r0
 800161e:	3568      	adds	r5, #104	; 0x68
 8001620:	e7e9      	b.n	80015f6 <_fwalk_reent+0x12>

08001622 <__retarget_lock_init_recursive>:
 8001622:	4770      	bx	lr

08001624 <__retarget_lock_acquire_recursive>:
 8001624:	4770      	bx	lr

08001626 <__retarget_lock_release_recursive>:
 8001626:	4770      	bx	lr

08001628 <__swhatbuf_r>:
 8001628:	b570      	push	{r4, r5, r6, lr}
 800162a:	460e      	mov	r6, r1
 800162c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001630:	4614      	mov	r4, r2
 8001632:	2900      	cmp	r1, #0
 8001634:	461d      	mov	r5, r3
 8001636:	b096      	sub	sp, #88	; 0x58
 8001638:	da08      	bge.n	800164c <__swhatbuf_r+0x24>
 800163a:	2200      	movs	r2, #0
 800163c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001640:	602a      	str	r2, [r5, #0]
 8001642:	061a      	lsls	r2, r3, #24
 8001644:	d410      	bmi.n	8001668 <__swhatbuf_r+0x40>
 8001646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800164a:	e00e      	b.n	800166a <__swhatbuf_r+0x42>
 800164c:	466a      	mov	r2, sp
 800164e:	f000 fc91 	bl	8001f74 <_fstat_r>
 8001652:	2800      	cmp	r0, #0
 8001654:	dbf1      	blt.n	800163a <__swhatbuf_r+0x12>
 8001656:	9a01      	ldr	r2, [sp, #4]
 8001658:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800165c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001660:	425a      	negs	r2, r3
 8001662:	415a      	adcs	r2, r3
 8001664:	602a      	str	r2, [r5, #0]
 8001666:	e7ee      	b.n	8001646 <__swhatbuf_r+0x1e>
 8001668:	2340      	movs	r3, #64	; 0x40
 800166a:	2000      	movs	r0, #0
 800166c:	6023      	str	r3, [r4, #0]
 800166e:	b016      	add	sp, #88	; 0x58
 8001670:	bd70      	pop	{r4, r5, r6, pc}
	...

08001674 <__smakebuf_r>:
 8001674:	898b      	ldrh	r3, [r1, #12]
 8001676:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001678:	079d      	lsls	r5, r3, #30
 800167a:	4606      	mov	r6, r0
 800167c:	460c      	mov	r4, r1
 800167e:	d507      	bpl.n	8001690 <__smakebuf_r+0x1c>
 8001680:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001684:	6023      	str	r3, [r4, #0]
 8001686:	6123      	str	r3, [r4, #16]
 8001688:	2301      	movs	r3, #1
 800168a:	6163      	str	r3, [r4, #20]
 800168c:	b002      	add	sp, #8
 800168e:	bd70      	pop	{r4, r5, r6, pc}
 8001690:	466a      	mov	r2, sp
 8001692:	ab01      	add	r3, sp, #4
 8001694:	f7ff ffc8 	bl	8001628 <__swhatbuf_r>
 8001698:	9900      	ldr	r1, [sp, #0]
 800169a:	4605      	mov	r5, r0
 800169c:	4630      	mov	r0, r6
 800169e:	f000 f891 	bl	80017c4 <_malloc_r>
 80016a2:	b948      	cbnz	r0, 80016b8 <__smakebuf_r+0x44>
 80016a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016a8:	059a      	lsls	r2, r3, #22
 80016aa:	d4ef      	bmi.n	800168c <__smakebuf_r+0x18>
 80016ac:	f023 0303 	bic.w	r3, r3, #3
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	81a3      	strh	r3, [r4, #12]
 80016b6:	e7e3      	b.n	8001680 <__smakebuf_r+0xc>
 80016b8:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <__smakebuf_r+0x7c>)
 80016ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80016bc:	89a3      	ldrh	r3, [r4, #12]
 80016be:	6020      	str	r0, [r4, #0]
 80016c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016c4:	81a3      	strh	r3, [r4, #12]
 80016c6:	9b00      	ldr	r3, [sp, #0]
 80016c8:	6120      	str	r0, [r4, #16]
 80016ca:	6163      	str	r3, [r4, #20]
 80016cc:	9b01      	ldr	r3, [sp, #4]
 80016ce:	b15b      	cbz	r3, 80016e8 <__smakebuf_r+0x74>
 80016d0:	4630      	mov	r0, r6
 80016d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016d6:	f000 fc5f 	bl	8001f98 <_isatty_r>
 80016da:	b128      	cbz	r0, 80016e8 <__smakebuf_r+0x74>
 80016dc:	89a3      	ldrh	r3, [r4, #12]
 80016de:	f023 0303 	bic.w	r3, r3, #3
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	81a3      	strh	r3, [r4, #12]
 80016e8:	89a0      	ldrh	r0, [r4, #12]
 80016ea:	4305      	orrs	r5, r0
 80016ec:	81a5      	strh	r5, [r4, #12]
 80016ee:	e7cd      	b.n	800168c <__smakebuf_r+0x18>
 80016f0:	08001481 	.word	0x08001481

080016f4 <_free_r>:
 80016f4:	b538      	push	{r3, r4, r5, lr}
 80016f6:	4605      	mov	r5, r0
 80016f8:	2900      	cmp	r1, #0
 80016fa:	d040      	beq.n	800177e <_free_r+0x8a>
 80016fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001700:	1f0c      	subs	r4, r1, #4
 8001702:	2b00      	cmp	r3, #0
 8001704:	bfb8      	it	lt
 8001706:	18e4      	addlt	r4, r4, r3
 8001708:	f000 fc76 	bl	8001ff8 <__malloc_lock>
 800170c:	4a1c      	ldr	r2, [pc, #112]	; (8001780 <_free_r+0x8c>)
 800170e:	6813      	ldr	r3, [r2, #0]
 8001710:	b933      	cbnz	r3, 8001720 <_free_r+0x2c>
 8001712:	6063      	str	r3, [r4, #4]
 8001714:	6014      	str	r4, [r2, #0]
 8001716:	4628      	mov	r0, r5
 8001718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800171c:	f000 bc72 	b.w	8002004 <__malloc_unlock>
 8001720:	42a3      	cmp	r3, r4
 8001722:	d908      	bls.n	8001736 <_free_r+0x42>
 8001724:	6820      	ldr	r0, [r4, #0]
 8001726:	1821      	adds	r1, r4, r0
 8001728:	428b      	cmp	r3, r1
 800172a:	bf01      	itttt	eq
 800172c:	6819      	ldreq	r1, [r3, #0]
 800172e:	685b      	ldreq	r3, [r3, #4]
 8001730:	1809      	addeq	r1, r1, r0
 8001732:	6021      	streq	r1, [r4, #0]
 8001734:	e7ed      	b.n	8001712 <_free_r+0x1e>
 8001736:	461a      	mov	r2, r3
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	b10b      	cbz	r3, 8001740 <_free_r+0x4c>
 800173c:	42a3      	cmp	r3, r4
 800173e:	d9fa      	bls.n	8001736 <_free_r+0x42>
 8001740:	6811      	ldr	r1, [r2, #0]
 8001742:	1850      	adds	r0, r2, r1
 8001744:	42a0      	cmp	r0, r4
 8001746:	d10b      	bne.n	8001760 <_free_r+0x6c>
 8001748:	6820      	ldr	r0, [r4, #0]
 800174a:	4401      	add	r1, r0
 800174c:	1850      	adds	r0, r2, r1
 800174e:	4283      	cmp	r3, r0
 8001750:	6011      	str	r1, [r2, #0]
 8001752:	d1e0      	bne.n	8001716 <_free_r+0x22>
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	4401      	add	r1, r0
 800175a:	6011      	str	r1, [r2, #0]
 800175c:	6053      	str	r3, [r2, #4]
 800175e:	e7da      	b.n	8001716 <_free_r+0x22>
 8001760:	d902      	bls.n	8001768 <_free_r+0x74>
 8001762:	230c      	movs	r3, #12
 8001764:	602b      	str	r3, [r5, #0]
 8001766:	e7d6      	b.n	8001716 <_free_r+0x22>
 8001768:	6820      	ldr	r0, [r4, #0]
 800176a:	1821      	adds	r1, r4, r0
 800176c:	428b      	cmp	r3, r1
 800176e:	bf01      	itttt	eq
 8001770:	6819      	ldreq	r1, [r3, #0]
 8001772:	685b      	ldreq	r3, [r3, #4]
 8001774:	1809      	addeq	r1, r1, r0
 8001776:	6021      	streq	r1, [r4, #0]
 8001778:	6063      	str	r3, [r4, #4]
 800177a:	6054      	str	r4, [r2, #4]
 800177c:	e7cb      	b.n	8001716 <_free_r+0x22>
 800177e:	bd38      	pop	{r3, r4, r5, pc}
 8001780:	2000009c 	.word	0x2000009c

08001784 <sbrk_aligned>:
 8001784:	b570      	push	{r4, r5, r6, lr}
 8001786:	4e0e      	ldr	r6, [pc, #56]	; (80017c0 <sbrk_aligned+0x3c>)
 8001788:	460c      	mov	r4, r1
 800178a:	6831      	ldr	r1, [r6, #0]
 800178c:	4605      	mov	r5, r0
 800178e:	b911      	cbnz	r1, 8001796 <sbrk_aligned+0x12>
 8001790:	f000 fb7a 	bl	8001e88 <_sbrk_r>
 8001794:	6030      	str	r0, [r6, #0]
 8001796:	4621      	mov	r1, r4
 8001798:	4628      	mov	r0, r5
 800179a:	f000 fb75 	bl	8001e88 <_sbrk_r>
 800179e:	1c43      	adds	r3, r0, #1
 80017a0:	d00a      	beq.n	80017b8 <sbrk_aligned+0x34>
 80017a2:	1cc4      	adds	r4, r0, #3
 80017a4:	f024 0403 	bic.w	r4, r4, #3
 80017a8:	42a0      	cmp	r0, r4
 80017aa:	d007      	beq.n	80017bc <sbrk_aligned+0x38>
 80017ac:	1a21      	subs	r1, r4, r0
 80017ae:	4628      	mov	r0, r5
 80017b0:	f000 fb6a 	bl	8001e88 <_sbrk_r>
 80017b4:	3001      	adds	r0, #1
 80017b6:	d101      	bne.n	80017bc <sbrk_aligned+0x38>
 80017b8:	f04f 34ff 	mov.w	r4, #4294967295
 80017bc:	4620      	mov	r0, r4
 80017be:	bd70      	pop	{r4, r5, r6, pc}
 80017c0:	200000a0 	.word	0x200000a0

080017c4 <_malloc_r>:
 80017c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017c8:	1ccd      	adds	r5, r1, #3
 80017ca:	f025 0503 	bic.w	r5, r5, #3
 80017ce:	3508      	adds	r5, #8
 80017d0:	2d0c      	cmp	r5, #12
 80017d2:	bf38      	it	cc
 80017d4:	250c      	movcc	r5, #12
 80017d6:	2d00      	cmp	r5, #0
 80017d8:	4607      	mov	r7, r0
 80017da:	db01      	blt.n	80017e0 <_malloc_r+0x1c>
 80017dc:	42a9      	cmp	r1, r5
 80017de:	d905      	bls.n	80017ec <_malloc_r+0x28>
 80017e0:	230c      	movs	r3, #12
 80017e2:	2600      	movs	r6, #0
 80017e4:	603b      	str	r3, [r7, #0]
 80017e6:	4630      	mov	r0, r6
 80017e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017ec:	4e2e      	ldr	r6, [pc, #184]	; (80018a8 <_malloc_r+0xe4>)
 80017ee:	f000 fc03 	bl	8001ff8 <__malloc_lock>
 80017f2:	6833      	ldr	r3, [r6, #0]
 80017f4:	461c      	mov	r4, r3
 80017f6:	bb34      	cbnz	r4, 8001846 <_malloc_r+0x82>
 80017f8:	4629      	mov	r1, r5
 80017fa:	4638      	mov	r0, r7
 80017fc:	f7ff ffc2 	bl	8001784 <sbrk_aligned>
 8001800:	1c43      	adds	r3, r0, #1
 8001802:	4604      	mov	r4, r0
 8001804:	d14d      	bne.n	80018a2 <_malloc_r+0xde>
 8001806:	6834      	ldr	r4, [r6, #0]
 8001808:	4626      	mov	r6, r4
 800180a:	2e00      	cmp	r6, #0
 800180c:	d140      	bne.n	8001890 <_malloc_r+0xcc>
 800180e:	6823      	ldr	r3, [r4, #0]
 8001810:	4631      	mov	r1, r6
 8001812:	4638      	mov	r0, r7
 8001814:	eb04 0803 	add.w	r8, r4, r3
 8001818:	f000 fb36 	bl	8001e88 <_sbrk_r>
 800181c:	4580      	cmp	r8, r0
 800181e:	d13a      	bne.n	8001896 <_malloc_r+0xd2>
 8001820:	6821      	ldr	r1, [r4, #0]
 8001822:	3503      	adds	r5, #3
 8001824:	1a6d      	subs	r5, r5, r1
 8001826:	f025 0503 	bic.w	r5, r5, #3
 800182a:	3508      	adds	r5, #8
 800182c:	2d0c      	cmp	r5, #12
 800182e:	bf38      	it	cc
 8001830:	250c      	movcc	r5, #12
 8001832:	4638      	mov	r0, r7
 8001834:	4629      	mov	r1, r5
 8001836:	f7ff ffa5 	bl	8001784 <sbrk_aligned>
 800183a:	3001      	adds	r0, #1
 800183c:	d02b      	beq.n	8001896 <_malloc_r+0xd2>
 800183e:	6823      	ldr	r3, [r4, #0]
 8001840:	442b      	add	r3, r5
 8001842:	6023      	str	r3, [r4, #0]
 8001844:	e00e      	b.n	8001864 <_malloc_r+0xa0>
 8001846:	6822      	ldr	r2, [r4, #0]
 8001848:	1b52      	subs	r2, r2, r5
 800184a:	d41e      	bmi.n	800188a <_malloc_r+0xc6>
 800184c:	2a0b      	cmp	r2, #11
 800184e:	d916      	bls.n	800187e <_malloc_r+0xba>
 8001850:	1961      	adds	r1, r4, r5
 8001852:	42a3      	cmp	r3, r4
 8001854:	6025      	str	r5, [r4, #0]
 8001856:	bf18      	it	ne
 8001858:	6059      	strne	r1, [r3, #4]
 800185a:	6863      	ldr	r3, [r4, #4]
 800185c:	bf08      	it	eq
 800185e:	6031      	streq	r1, [r6, #0]
 8001860:	5162      	str	r2, [r4, r5]
 8001862:	604b      	str	r3, [r1, #4]
 8001864:	4638      	mov	r0, r7
 8001866:	f104 060b 	add.w	r6, r4, #11
 800186a:	f000 fbcb 	bl	8002004 <__malloc_unlock>
 800186e:	f026 0607 	bic.w	r6, r6, #7
 8001872:	1d23      	adds	r3, r4, #4
 8001874:	1af2      	subs	r2, r6, r3
 8001876:	d0b6      	beq.n	80017e6 <_malloc_r+0x22>
 8001878:	1b9b      	subs	r3, r3, r6
 800187a:	50a3      	str	r3, [r4, r2]
 800187c:	e7b3      	b.n	80017e6 <_malloc_r+0x22>
 800187e:	6862      	ldr	r2, [r4, #4]
 8001880:	42a3      	cmp	r3, r4
 8001882:	bf0c      	ite	eq
 8001884:	6032      	streq	r2, [r6, #0]
 8001886:	605a      	strne	r2, [r3, #4]
 8001888:	e7ec      	b.n	8001864 <_malloc_r+0xa0>
 800188a:	4623      	mov	r3, r4
 800188c:	6864      	ldr	r4, [r4, #4]
 800188e:	e7b2      	b.n	80017f6 <_malloc_r+0x32>
 8001890:	4634      	mov	r4, r6
 8001892:	6876      	ldr	r6, [r6, #4]
 8001894:	e7b9      	b.n	800180a <_malloc_r+0x46>
 8001896:	230c      	movs	r3, #12
 8001898:	4638      	mov	r0, r7
 800189a:	603b      	str	r3, [r7, #0]
 800189c:	f000 fbb2 	bl	8002004 <__malloc_unlock>
 80018a0:	e7a1      	b.n	80017e6 <_malloc_r+0x22>
 80018a2:	6025      	str	r5, [r4, #0]
 80018a4:	e7de      	b.n	8001864 <_malloc_r+0xa0>
 80018a6:	bf00      	nop
 80018a8:	2000009c 	.word	0x2000009c

080018ac <__sfputc_r>:
 80018ac:	6893      	ldr	r3, [r2, #8]
 80018ae:	b410      	push	{r4}
 80018b0:	3b01      	subs	r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	6093      	str	r3, [r2, #8]
 80018b6:	da07      	bge.n	80018c8 <__sfputc_r+0x1c>
 80018b8:	6994      	ldr	r4, [r2, #24]
 80018ba:	42a3      	cmp	r3, r4
 80018bc:	db01      	blt.n	80018c2 <__sfputc_r+0x16>
 80018be:	290a      	cmp	r1, #10
 80018c0:	d102      	bne.n	80018c8 <__sfputc_r+0x1c>
 80018c2:	bc10      	pop	{r4}
 80018c4:	f7ff bc3a 	b.w	800113c <__swbuf_r>
 80018c8:	6813      	ldr	r3, [r2, #0]
 80018ca:	1c58      	adds	r0, r3, #1
 80018cc:	6010      	str	r0, [r2, #0]
 80018ce:	7019      	strb	r1, [r3, #0]
 80018d0:	4608      	mov	r0, r1
 80018d2:	bc10      	pop	{r4}
 80018d4:	4770      	bx	lr

080018d6 <__sfputs_r>:
 80018d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018d8:	4606      	mov	r6, r0
 80018da:	460f      	mov	r7, r1
 80018dc:	4614      	mov	r4, r2
 80018de:	18d5      	adds	r5, r2, r3
 80018e0:	42ac      	cmp	r4, r5
 80018e2:	d101      	bne.n	80018e8 <__sfputs_r+0x12>
 80018e4:	2000      	movs	r0, #0
 80018e6:	e007      	b.n	80018f8 <__sfputs_r+0x22>
 80018e8:	463a      	mov	r2, r7
 80018ea:	4630      	mov	r0, r6
 80018ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018f0:	f7ff ffdc 	bl	80018ac <__sfputc_r>
 80018f4:	1c43      	adds	r3, r0, #1
 80018f6:	d1f3      	bne.n	80018e0 <__sfputs_r+0xa>
 80018f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080018fc <_vfiprintf_r>:
 80018fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001900:	460d      	mov	r5, r1
 8001902:	4614      	mov	r4, r2
 8001904:	4698      	mov	r8, r3
 8001906:	4606      	mov	r6, r0
 8001908:	b09d      	sub	sp, #116	; 0x74
 800190a:	b118      	cbz	r0, 8001914 <_vfiprintf_r+0x18>
 800190c:	6983      	ldr	r3, [r0, #24]
 800190e:	b90b      	cbnz	r3, 8001914 <_vfiprintf_r+0x18>
 8001910:	f7ff fdea 	bl	80014e8 <__sinit>
 8001914:	4b89      	ldr	r3, [pc, #548]	; (8001b3c <_vfiprintf_r+0x240>)
 8001916:	429d      	cmp	r5, r3
 8001918:	d11b      	bne.n	8001952 <_vfiprintf_r+0x56>
 800191a:	6875      	ldr	r5, [r6, #4]
 800191c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800191e:	07d9      	lsls	r1, r3, #31
 8001920:	d405      	bmi.n	800192e <_vfiprintf_r+0x32>
 8001922:	89ab      	ldrh	r3, [r5, #12]
 8001924:	059a      	lsls	r2, r3, #22
 8001926:	d402      	bmi.n	800192e <_vfiprintf_r+0x32>
 8001928:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800192a:	f7ff fe7b 	bl	8001624 <__retarget_lock_acquire_recursive>
 800192e:	89ab      	ldrh	r3, [r5, #12]
 8001930:	071b      	lsls	r3, r3, #28
 8001932:	d501      	bpl.n	8001938 <_vfiprintf_r+0x3c>
 8001934:	692b      	ldr	r3, [r5, #16]
 8001936:	b9eb      	cbnz	r3, 8001974 <_vfiprintf_r+0x78>
 8001938:	4629      	mov	r1, r5
 800193a:	4630      	mov	r0, r6
 800193c:	f7ff fc50 	bl	80011e0 <__swsetup_r>
 8001940:	b1c0      	cbz	r0, 8001974 <_vfiprintf_r+0x78>
 8001942:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001944:	07dc      	lsls	r4, r3, #31
 8001946:	d50e      	bpl.n	8001966 <_vfiprintf_r+0x6a>
 8001948:	f04f 30ff 	mov.w	r0, #4294967295
 800194c:	b01d      	add	sp, #116	; 0x74
 800194e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001952:	4b7b      	ldr	r3, [pc, #492]	; (8001b40 <_vfiprintf_r+0x244>)
 8001954:	429d      	cmp	r5, r3
 8001956:	d101      	bne.n	800195c <_vfiprintf_r+0x60>
 8001958:	68b5      	ldr	r5, [r6, #8]
 800195a:	e7df      	b.n	800191c <_vfiprintf_r+0x20>
 800195c:	4b79      	ldr	r3, [pc, #484]	; (8001b44 <_vfiprintf_r+0x248>)
 800195e:	429d      	cmp	r5, r3
 8001960:	bf08      	it	eq
 8001962:	68f5      	ldreq	r5, [r6, #12]
 8001964:	e7da      	b.n	800191c <_vfiprintf_r+0x20>
 8001966:	89ab      	ldrh	r3, [r5, #12]
 8001968:	0598      	lsls	r0, r3, #22
 800196a:	d4ed      	bmi.n	8001948 <_vfiprintf_r+0x4c>
 800196c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800196e:	f7ff fe5a 	bl	8001626 <__retarget_lock_release_recursive>
 8001972:	e7e9      	b.n	8001948 <_vfiprintf_r+0x4c>
 8001974:	2300      	movs	r3, #0
 8001976:	9309      	str	r3, [sp, #36]	; 0x24
 8001978:	2320      	movs	r3, #32
 800197a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800197e:	2330      	movs	r3, #48	; 0x30
 8001980:	f04f 0901 	mov.w	r9, #1
 8001984:	f8cd 800c 	str.w	r8, [sp, #12]
 8001988:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8001b48 <_vfiprintf_r+0x24c>
 800198c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001990:	4623      	mov	r3, r4
 8001992:	469a      	mov	sl, r3
 8001994:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001998:	b10a      	cbz	r2, 800199e <_vfiprintf_r+0xa2>
 800199a:	2a25      	cmp	r2, #37	; 0x25
 800199c:	d1f9      	bne.n	8001992 <_vfiprintf_r+0x96>
 800199e:	ebba 0b04 	subs.w	fp, sl, r4
 80019a2:	d00b      	beq.n	80019bc <_vfiprintf_r+0xc0>
 80019a4:	465b      	mov	r3, fp
 80019a6:	4622      	mov	r2, r4
 80019a8:	4629      	mov	r1, r5
 80019aa:	4630      	mov	r0, r6
 80019ac:	f7ff ff93 	bl	80018d6 <__sfputs_r>
 80019b0:	3001      	adds	r0, #1
 80019b2:	f000 80aa 	beq.w	8001b0a <_vfiprintf_r+0x20e>
 80019b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80019b8:	445a      	add	r2, fp
 80019ba:	9209      	str	r2, [sp, #36]	; 0x24
 80019bc:	f89a 3000 	ldrb.w	r3, [sl]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 80a2 	beq.w	8001b0a <_vfiprintf_r+0x20e>
 80019c6:	2300      	movs	r3, #0
 80019c8:	f04f 32ff 	mov.w	r2, #4294967295
 80019cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80019d0:	f10a 0a01 	add.w	sl, sl, #1
 80019d4:	9304      	str	r3, [sp, #16]
 80019d6:	9307      	str	r3, [sp, #28]
 80019d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80019dc:	931a      	str	r3, [sp, #104]	; 0x68
 80019de:	4654      	mov	r4, sl
 80019e0:	2205      	movs	r2, #5
 80019e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019e6:	4858      	ldr	r0, [pc, #352]	; (8001b48 <_vfiprintf_r+0x24c>)
 80019e8:	f000 faf8 	bl	8001fdc <memchr>
 80019ec:	9a04      	ldr	r2, [sp, #16]
 80019ee:	b9d8      	cbnz	r0, 8001a28 <_vfiprintf_r+0x12c>
 80019f0:	06d1      	lsls	r1, r2, #27
 80019f2:	bf44      	itt	mi
 80019f4:	2320      	movmi	r3, #32
 80019f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80019fa:	0713      	lsls	r3, r2, #28
 80019fc:	bf44      	itt	mi
 80019fe:	232b      	movmi	r3, #43	; 0x2b
 8001a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a04:	f89a 3000 	ldrb.w	r3, [sl]
 8001a08:	2b2a      	cmp	r3, #42	; 0x2a
 8001a0a:	d015      	beq.n	8001a38 <_vfiprintf_r+0x13c>
 8001a0c:	4654      	mov	r4, sl
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f04f 0c0a 	mov.w	ip, #10
 8001a14:	9a07      	ldr	r2, [sp, #28]
 8001a16:	4621      	mov	r1, r4
 8001a18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a1c:	3b30      	subs	r3, #48	; 0x30
 8001a1e:	2b09      	cmp	r3, #9
 8001a20:	d94e      	bls.n	8001ac0 <_vfiprintf_r+0x1c4>
 8001a22:	b1b0      	cbz	r0, 8001a52 <_vfiprintf_r+0x156>
 8001a24:	9207      	str	r2, [sp, #28]
 8001a26:	e014      	b.n	8001a52 <_vfiprintf_r+0x156>
 8001a28:	eba0 0308 	sub.w	r3, r0, r8
 8001a2c:	fa09 f303 	lsl.w	r3, r9, r3
 8001a30:	4313      	orrs	r3, r2
 8001a32:	46a2      	mov	sl, r4
 8001a34:	9304      	str	r3, [sp, #16]
 8001a36:	e7d2      	b.n	80019de <_vfiprintf_r+0xe2>
 8001a38:	9b03      	ldr	r3, [sp, #12]
 8001a3a:	1d19      	adds	r1, r3, #4
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	9103      	str	r1, [sp, #12]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	bfbb      	ittet	lt
 8001a44:	425b      	neglt	r3, r3
 8001a46:	f042 0202 	orrlt.w	r2, r2, #2
 8001a4a:	9307      	strge	r3, [sp, #28]
 8001a4c:	9307      	strlt	r3, [sp, #28]
 8001a4e:	bfb8      	it	lt
 8001a50:	9204      	strlt	r2, [sp, #16]
 8001a52:	7823      	ldrb	r3, [r4, #0]
 8001a54:	2b2e      	cmp	r3, #46	; 0x2e
 8001a56:	d10c      	bne.n	8001a72 <_vfiprintf_r+0x176>
 8001a58:	7863      	ldrb	r3, [r4, #1]
 8001a5a:	2b2a      	cmp	r3, #42	; 0x2a
 8001a5c:	d135      	bne.n	8001aca <_vfiprintf_r+0x1ce>
 8001a5e:	9b03      	ldr	r3, [sp, #12]
 8001a60:	3402      	adds	r4, #2
 8001a62:	1d1a      	adds	r2, r3, #4
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	9203      	str	r2, [sp, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	bfb8      	it	lt
 8001a6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001a70:	9305      	str	r3, [sp, #20]
 8001a72:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8001b4c <_vfiprintf_r+0x250>
 8001a76:	2203      	movs	r2, #3
 8001a78:	4650      	mov	r0, sl
 8001a7a:	7821      	ldrb	r1, [r4, #0]
 8001a7c:	f000 faae 	bl	8001fdc <memchr>
 8001a80:	b140      	cbz	r0, 8001a94 <_vfiprintf_r+0x198>
 8001a82:	2340      	movs	r3, #64	; 0x40
 8001a84:	eba0 000a 	sub.w	r0, r0, sl
 8001a88:	fa03 f000 	lsl.w	r0, r3, r0
 8001a8c:	9b04      	ldr	r3, [sp, #16]
 8001a8e:	3401      	adds	r4, #1
 8001a90:	4303      	orrs	r3, r0
 8001a92:	9304      	str	r3, [sp, #16]
 8001a94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a98:	2206      	movs	r2, #6
 8001a9a:	482d      	ldr	r0, [pc, #180]	; (8001b50 <_vfiprintf_r+0x254>)
 8001a9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001aa0:	f000 fa9c 	bl	8001fdc <memchr>
 8001aa4:	2800      	cmp	r0, #0
 8001aa6:	d03f      	beq.n	8001b28 <_vfiprintf_r+0x22c>
 8001aa8:	4b2a      	ldr	r3, [pc, #168]	; (8001b54 <_vfiprintf_r+0x258>)
 8001aaa:	bb1b      	cbnz	r3, 8001af4 <_vfiprintf_r+0x1f8>
 8001aac:	9b03      	ldr	r3, [sp, #12]
 8001aae:	3307      	adds	r3, #7
 8001ab0:	f023 0307 	bic.w	r3, r3, #7
 8001ab4:	3308      	adds	r3, #8
 8001ab6:	9303      	str	r3, [sp, #12]
 8001ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001aba:	443b      	add	r3, r7
 8001abc:	9309      	str	r3, [sp, #36]	; 0x24
 8001abe:	e767      	b.n	8001990 <_vfiprintf_r+0x94>
 8001ac0:	460c      	mov	r4, r1
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	fb0c 3202 	mla	r2, ip, r2, r3
 8001ac8:	e7a5      	b.n	8001a16 <_vfiprintf_r+0x11a>
 8001aca:	2300      	movs	r3, #0
 8001acc:	f04f 0c0a 	mov.w	ip, #10
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	3401      	adds	r4, #1
 8001ad4:	9305      	str	r3, [sp, #20]
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001adc:	3a30      	subs	r2, #48	; 0x30
 8001ade:	2a09      	cmp	r2, #9
 8001ae0:	d903      	bls.n	8001aea <_vfiprintf_r+0x1ee>
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0c5      	beq.n	8001a72 <_vfiprintf_r+0x176>
 8001ae6:	9105      	str	r1, [sp, #20]
 8001ae8:	e7c3      	b.n	8001a72 <_vfiprintf_r+0x176>
 8001aea:	4604      	mov	r4, r0
 8001aec:	2301      	movs	r3, #1
 8001aee:	fb0c 2101 	mla	r1, ip, r1, r2
 8001af2:	e7f0      	b.n	8001ad6 <_vfiprintf_r+0x1da>
 8001af4:	ab03      	add	r3, sp, #12
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	462a      	mov	r2, r5
 8001afa:	4630      	mov	r0, r6
 8001afc:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <_vfiprintf_r+0x25c>)
 8001afe:	a904      	add	r1, sp, #16
 8001b00:	f3af 8000 	nop.w
 8001b04:	4607      	mov	r7, r0
 8001b06:	1c78      	adds	r0, r7, #1
 8001b08:	d1d6      	bne.n	8001ab8 <_vfiprintf_r+0x1bc>
 8001b0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001b0c:	07d9      	lsls	r1, r3, #31
 8001b0e:	d405      	bmi.n	8001b1c <_vfiprintf_r+0x220>
 8001b10:	89ab      	ldrh	r3, [r5, #12]
 8001b12:	059a      	lsls	r2, r3, #22
 8001b14:	d402      	bmi.n	8001b1c <_vfiprintf_r+0x220>
 8001b16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001b18:	f7ff fd85 	bl	8001626 <__retarget_lock_release_recursive>
 8001b1c:	89ab      	ldrh	r3, [r5, #12]
 8001b1e:	065b      	lsls	r3, r3, #25
 8001b20:	f53f af12 	bmi.w	8001948 <_vfiprintf_r+0x4c>
 8001b24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001b26:	e711      	b.n	800194c <_vfiprintf_r+0x50>
 8001b28:	ab03      	add	r3, sp, #12
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	462a      	mov	r2, r5
 8001b2e:	4630      	mov	r0, r6
 8001b30:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <_vfiprintf_r+0x25c>)
 8001b32:	a904      	add	r1, sp, #16
 8001b34:	f000 f882 	bl	8001c3c <_printf_i>
 8001b38:	e7e4      	b.n	8001b04 <_vfiprintf_r+0x208>
 8001b3a:	bf00      	nop
 8001b3c:	080020b0 	.word	0x080020b0
 8001b40:	080020d0 	.word	0x080020d0
 8001b44:	08002090 	.word	0x08002090
 8001b48:	080020f0 	.word	0x080020f0
 8001b4c:	080020f6 	.word	0x080020f6
 8001b50:	080020fa 	.word	0x080020fa
 8001b54:	00000000 	.word	0x00000000
 8001b58:	080018d7 	.word	0x080018d7

08001b5c <_printf_common>:
 8001b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b60:	4616      	mov	r6, r2
 8001b62:	4699      	mov	r9, r3
 8001b64:	688a      	ldr	r2, [r1, #8]
 8001b66:	690b      	ldr	r3, [r1, #16]
 8001b68:	4607      	mov	r7, r0
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	bfb8      	it	lt
 8001b6e:	4613      	movlt	r3, r2
 8001b70:	6033      	str	r3, [r6, #0]
 8001b72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001b76:	460c      	mov	r4, r1
 8001b78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001b7c:	b10a      	cbz	r2, 8001b82 <_printf_common+0x26>
 8001b7e:	3301      	adds	r3, #1
 8001b80:	6033      	str	r3, [r6, #0]
 8001b82:	6823      	ldr	r3, [r4, #0]
 8001b84:	0699      	lsls	r1, r3, #26
 8001b86:	bf42      	ittt	mi
 8001b88:	6833      	ldrmi	r3, [r6, #0]
 8001b8a:	3302      	addmi	r3, #2
 8001b8c:	6033      	strmi	r3, [r6, #0]
 8001b8e:	6825      	ldr	r5, [r4, #0]
 8001b90:	f015 0506 	ands.w	r5, r5, #6
 8001b94:	d106      	bne.n	8001ba4 <_printf_common+0x48>
 8001b96:	f104 0a19 	add.w	sl, r4, #25
 8001b9a:	68e3      	ldr	r3, [r4, #12]
 8001b9c:	6832      	ldr	r2, [r6, #0]
 8001b9e:	1a9b      	subs	r3, r3, r2
 8001ba0:	42ab      	cmp	r3, r5
 8001ba2:	dc28      	bgt.n	8001bf6 <_printf_common+0x9a>
 8001ba4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001ba8:	1e13      	subs	r3, r2, #0
 8001baa:	6822      	ldr	r2, [r4, #0]
 8001bac:	bf18      	it	ne
 8001bae:	2301      	movne	r3, #1
 8001bb0:	0692      	lsls	r2, r2, #26
 8001bb2:	d42d      	bmi.n	8001c10 <_printf_common+0xb4>
 8001bb4:	4649      	mov	r1, r9
 8001bb6:	4638      	mov	r0, r7
 8001bb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001bbc:	47c0      	blx	r8
 8001bbe:	3001      	adds	r0, #1
 8001bc0:	d020      	beq.n	8001c04 <_printf_common+0xa8>
 8001bc2:	6823      	ldr	r3, [r4, #0]
 8001bc4:	68e5      	ldr	r5, [r4, #12]
 8001bc6:	f003 0306 	and.w	r3, r3, #6
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	bf18      	it	ne
 8001bce:	2500      	movne	r5, #0
 8001bd0:	6832      	ldr	r2, [r6, #0]
 8001bd2:	f04f 0600 	mov.w	r6, #0
 8001bd6:	68a3      	ldr	r3, [r4, #8]
 8001bd8:	bf08      	it	eq
 8001bda:	1aad      	subeq	r5, r5, r2
 8001bdc:	6922      	ldr	r2, [r4, #16]
 8001bde:	bf08      	it	eq
 8001be0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001be4:	4293      	cmp	r3, r2
 8001be6:	bfc4      	itt	gt
 8001be8:	1a9b      	subgt	r3, r3, r2
 8001bea:	18ed      	addgt	r5, r5, r3
 8001bec:	341a      	adds	r4, #26
 8001bee:	42b5      	cmp	r5, r6
 8001bf0:	d11a      	bne.n	8001c28 <_printf_common+0xcc>
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	e008      	b.n	8001c08 <_printf_common+0xac>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	4652      	mov	r2, sl
 8001bfa:	4649      	mov	r1, r9
 8001bfc:	4638      	mov	r0, r7
 8001bfe:	47c0      	blx	r8
 8001c00:	3001      	adds	r0, #1
 8001c02:	d103      	bne.n	8001c0c <_printf_common+0xb0>
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
 8001c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c0c:	3501      	adds	r5, #1
 8001c0e:	e7c4      	b.n	8001b9a <_printf_common+0x3e>
 8001c10:	2030      	movs	r0, #48	; 0x30
 8001c12:	18e1      	adds	r1, r4, r3
 8001c14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001c1e:	4422      	add	r2, r4
 8001c20:	3302      	adds	r3, #2
 8001c22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001c26:	e7c5      	b.n	8001bb4 <_printf_common+0x58>
 8001c28:	2301      	movs	r3, #1
 8001c2a:	4622      	mov	r2, r4
 8001c2c:	4649      	mov	r1, r9
 8001c2e:	4638      	mov	r0, r7
 8001c30:	47c0      	blx	r8
 8001c32:	3001      	adds	r0, #1
 8001c34:	d0e6      	beq.n	8001c04 <_printf_common+0xa8>
 8001c36:	3601      	adds	r6, #1
 8001c38:	e7d9      	b.n	8001bee <_printf_common+0x92>
	...

08001c3c <_printf_i>:
 8001c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c40:	7e0f      	ldrb	r7, [r1, #24]
 8001c42:	4691      	mov	r9, r2
 8001c44:	2f78      	cmp	r7, #120	; 0x78
 8001c46:	4680      	mov	r8, r0
 8001c48:	460c      	mov	r4, r1
 8001c4a:	469a      	mov	sl, r3
 8001c4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001c4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001c52:	d807      	bhi.n	8001c64 <_printf_i+0x28>
 8001c54:	2f62      	cmp	r7, #98	; 0x62
 8001c56:	d80a      	bhi.n	8001c6e <_printf_i+0x32>
 8001c58:	2f00      	cmp	r7, #0
 8001c5a:	f000 80d9 	beq.w	8001e10 <_printf_i+0x1d4>
 8001c5e:	2f58      	cmp	r7, #88	; 0x58
 8001c60:	f000 80a4 	beq.w	8001dac <_printf_i+0x170>
 8001c64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001c6c:	e03a      	b.n	8001ce4 <_printf_i+0xa8>
 8001c6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001c72:	2b15      	cmp	r3, #21
 8001c74:	d8f6      	bhi.n	8001c64 <_printf_i+0x28>
 8001c76:	a101      	add	r1, pc, #4	; (adr r1, 8001c7c <_printf_i+0x40>)
 8001c78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001c7c:	08001cd5 	.word	0x08001cd5
 8001c80:	08001ce9 	.word	0x08001ce9
 8001c84:	08001c65 	.word	0x08001c65
 8001c88:	08001c65 	.word	0x08001c65
 8001c8c:	08001c65 	.word	0x08001c65
 8001c90:	08001c65 	.word	0x08001c65
 8001c94:	08001ce9 	.word	0x08001ce9
 8001c98:	08001c65 	.word	0x08001c65
 8001c9c:	08001c65 	.word	0x08001c65
 8001ca0:	08001c65 	.word	0x08001c65
 8001ca4:	08001c65 	.word	0x08001c65
 8001ca8:	08001df7 	.word	0x08001df7
 8001cac:	08001d19 	.word	0x08001d19
 8001cb0:	08001dd9 	.word	0x08001dd9
 8001cb4:	08001c65 	.word	0x08001c65
 8001cb8:	08001c65 	.word	0x08001c65
 8001cbc:	08001e19 	.word	0x08001e19
 8001cc0:	08001c65 	.word	0x08001c65
 8001cc4:	08001d19 	.word	0x08001d19
 8001cc8:	08001c65 	.word	0x08001c65
 8001ccc:	08001c65 	.word	0x08001c65
 8001cd0:	08001de1 	.word	0x08001de1
 8001cd4:	682b      	ldr	r3, [r5, #0]
 8001cd6:	1d1a      	adds	r2, r3, #4
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	602a      	str	r2, [r5, #0]
 8001cdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ce0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e0a4      	b.n	8001e32 <_printf_i+0x1f6>
 8001ce8:	6820      	ldr	r0, [r4, #0]
 8001cea:	6829      	ldr	r1, [r5, #0]
 8001cec:	0606      	lsls	r6, r0, #24
 8001cee:	f101 0304 	add.w	r3, r1, #4
 8001cf2:	d50a      	bpl.n	8001d0a <_printf_i+0xce>
 8001cf4:	680e      	ldr	r6, [r1, #0]
 8001cf6:	602b      	str	r3, [r5, #0]
 8001cf8:	2e00      	cmp	r6, #0
 8001cfa:	da03      	bge.n	8001d04 <_printf_i+0xc8>
 8001cfc:	232d      	movs	r3, #45	; 0x2d
 8001cfe:	4276      	negs	r6, r6
 8001d00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d04:	230a      	movs	r3, #10
 8001d06:	485e      	ldr	r0, [pc, #376]	; (8001e80 <_printf_i+0x244>)
 8001d08:	e019      	b.n	8001d3e <_printf_i+0x102>
 8001d0a:	680e      	ldr	r6, [r1, #0]
 8001d0c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001d10:	602b      	str	r3, [r5, #0]
 8001d12:	bf18      	it	ne
 8001d14:	b236      	sxthne	r6, r6
 8001d16:	e7ef      	b.n	8001cf8 <_printf_i+0xbc>
 8001d18:	682b      	ldr	r3, [r5, #0]
 8001d1a:	6820      	ldr	r0, [r4, #0]
 8001d1c:	1d19      	adds	r1, r3, #4
 8001d1e:	6029      	str	r1, [r5, #0]
 8001d20:	0601      	lsls	r1, r0, #24
 8001d22:	d501      	bpl.n	8001d28 <_printf_i+0xec>
 8001d24:	681e      	ldr	r6, [r3, #0]
 8001d26:	e002      	b.n	8001d2e <_printf_i+0xf2>
 8001d28:	0646      	lsls	r6, r0, #25
 8001d2a:	d5fb      	bpl.n	8001d24 <_printf_i+0xe8>
 8001d2c:	881e      	ldrh	r6, [r3, #0]
 8001d2e:	2f6f      	cmp	r7, #111	; 0x6f
 8001d30:	bf0c      	ite	eq
 8001d32:	2308      	moveq	r3, #8
 8001d34:	230a      	movne	r3, #10
 8001d36:	4852      	ldr	r0, [pc, #328]	; (8001e80 <_printf_i+0x244>)
 8001d38:	2100      	movs	r1, #0
 8001d3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001d3e:	6865      	ldr	r5, [r4, #4]
 8001d40:	2d00      	cmp	r5, #0
 8001d42:	bfa8      	it	ge
 8001d44:	6821      	ldrge	r1, [r4, #0]
 8001d46:	60a5      	str	r5, [r4, #8]
 8001d48:	bfa4      	itt	ge
 8001d4a:	f021 0104 	bicge.w	r1, r1, #4
 8001d4e:	6021      	strge	r1, [r4, #0]
 8001d50:	b90e      	cbnz	r6, 8001d56 <_printf_i+0x11a>
 8001d52:	2d00      	cmp	r5, #0
 8001d54:	d04d      	beq.n	8001df2 <_printf_i+0x1b6>
 8001d56:	4615      	mov	r5, r2
 8001d58:	fbb6 f1f3 	udiv	r1, r6, r3
 8001d5c:	fb03 6711 	mls	r7, r3, r1, r6
 8001d60:	5dc7      	ldrb	r7, [r0, r7]
 8001d62:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001d66:	4637      	mov	r7, r6
 8001d68:	42bb      	cmp	r3, r7
 8001d6a:	460e      	mov	r6, r1
 8001d6c:	d9f4      	bls.n	8001d58 <_printf_i+0x11c>
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d10b      	bne.n	8001d8a <_printf_i+0x14e>
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	07de      	lsls	r6, r3, #31
 8001d76:	d508      	bpl.n	8001d8a <_printf_i+0x14e>
 8001d78:	6923      	ldr	r3, [r4, #16]
 8001d7a:	6861      	ldr	r1, [r4, #4]
 8001d7c:	4299      	cmp	r1, r3
 8001d7e:	bfde      	ittt	le
 8001d80:	2330      	movle	r3, #48	; 0x30
 8001d82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001d86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001d8a:	1b52      	subs	r2, r2, r5
 8001d8c:	6122      	str	r2, [r4, #16]
 8001d8e:	464b      	mov	r3, r9
 8001d90:	4621      	mov	r1, r4
 8001d92:	4640      	mov	r0, r8
 8001d94:	f8cd a000 	str.w	sl, [sp]
 8001d98:	aa03      	add	r2, sp, #12
 8001d9a:	f7ff fedf 	bl	8001b5c <_printf_common>
 8001d9e:	3001      	adds	r0, #1
 8001da0:	d14c      	bne.n	8001e3c <_printf_i+0x200>
 8001da2:	f04f 30ff 	mov.w	r0, #4294967295
 8001da6:	b004      	add	sp, #16
 8001da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001dac:	4834      	ldr	r0, [pc, #208]	; (8001e80 <_printf_i+0x244>)
 8001dae:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001db2:	6829      	ldr	r1, [r5, #0]
 8001db4:	6823      	ldr	r3, [r4, #0]
 8001db6:	f851 6b04 	ldr.w	r6, [r1], #4
 8001dba:	6029      	str	r1, [r5, #0]
 8001dbc:	061d      	lsls	r5, r3, #24
 8001dbe:	d514      	bpl.n	8001dea <_printf_i+0x1ae>
 8001dc0:	07df      	lsls	r7, r3, #31
 8001dc2:	bf44      	itt	mi
 8001dc4:	f043 0320 	orrmi.w	r3, r3, #32
 8001dc8:	6023      	strmi	r3, [r4, #0]
 8001dca:	b91e      	cbnz	r6, 8001dd4 <_printf_i+0x198>
 8001dcc:	6823      	ldr	r3, [r4, #0]
 8001dce:	f023 0320 	bic.w	r3, r3, #32
 8001dd2:	6023      	str	r3, [r4, #0]
 8001dd4:	2310      	movs	r3, #16
 8001dd6:	e7af      	b.n	8001d38 <_printf_i+0xfc>
 8001dd8:	6823      	ldr	r3, [r4, #0]
 8001dda:	f043 0320 	orr.w	r3, r3, #32
 8001dde:	6023      	str	r3, [r4, #0]
 8001de0:	2378      	movs	r3, #120	; 0x78
 8001de2:	4828      	ldr	r0, [pc, #160]	; (8001e84 <_printf_i+0x248>)
 8001de4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001de8:	e7e3      	b.n	8001db2 <_printf_i+0x176>
 8001dea:	0659      	lsls	r1, r3, #25
 8001dec:	bf48      	it	mi
 8001dee:	b2b6      	uxthmi	r6, r6
 8001df0:	e7e6      	b.n	8001dc0 <_printf_i+0x184>
 8001df2:	4615      	mov	r5, r2
 8001df4:	e7bb      	b.n	8001d6e <_printf_i+0x132>
 8001df6:	682b      	ldr	r3, [r5, #0]
 8001df8:	6826      	ldr	r6, [r4, #0]
 8001dfa:	1d18      	adds	r0, r3, #4
 8001dfc:	6961      	ldr	r1, [r4, #20]
 8001dfe:	6028      	str	r0, [r5, #0]
 8001e00:	0635      	lsls	r5, r6, #24
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	d501      	bpl.n	8001e0a <_printf_i+0x1ce>
 8001e06:	6019      	str	r1, [r3, #0]
 8001e08:	e002      	b.n	8001e10 <_printf_i+0x1d4>
 8001e0a:	0670      	lsls	r0, r6, #25
 8001e0c:	d5fb      	bpl.n	8001e06 <_printf_i+0x1ca>
 8001e0e:	8019      	strh	r1, [r3, #0]
 8001e10:	2300      	movs	r3, #0
 8001e12:	4615      	mov	r5, r2
 8001e14:	6123      	str	r3, [r4, #16]
 8001e16:	e7ba      	b.n	8001d8e <_printf_i+0x152>
 8001e18:	682b      	ldr	r3, [r5, #0]
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	1d1a      	adds	r2, r3, #4
 8001e1e:	602a      	str	r2, [r5, #0]
 8001e20:	681d      	ldr	r5, [r3, #0]
 8001e22:	6862      	ldr	r2, [r4, #4]
 8001e24:	4628      	mov	r0, r5
 8001e26:	f000 f8d9 	bl	8001fdc <memchr>
 8001e2a:	b108      	cbz	r0, 8001e30 <_printf_i+0x1f4>
 8001e2c:	1b40      	subs	r0, r0, r5
 8001e2e:	6060      	str	r0, [r4, #4]
 8001e30:	6863      	ldr	r3, [r4, #4]
 8001e32:	6123      	str	r3, [r4, #16]
 8001e34:	2300      	movs	r3, #0
 8001e36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e3a:	e7a8      	b.n	8001d8e <_printf_i+0x152>
 8001e3c:	462a      	mov	r2, r5
 8001e3e:	4649      	mov	r1, r9
 8001e40:	4640      	mov	r0, r8
 8001e42:	6923      	ldr	r3, [r4, #16]
 8001e44:	47d0      	blx	sl
 8001e46:	3001      	adds	r0, #1
 8001e48:	d0ab      	beq.n	8001da2 <_printf_i+0x166>
 8001e4a:	6823      	ldr	r3, [r4, #0]
 8001e4c:	079b      	lsls	r3, r3, #30
 8001e4e:	d413      	bmi.n	8001e78 <_printf_i+0x23c>
 8001e50:	68e0      	ldr	r0, [r4, #12]
 8001e52:	9b03      	ldr	r3, [sp, #12]
 8001e54:	4298      	cmp	r0, r3
 8001e56:	bfb8      	it	lt
 8001e58:	4618      	movlt	r0, r3
 8001e5a:	e7a4      	b.n	8001da6 <_printf_i+0x16a>
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	4632      	mov	r2, r6
 8001e60:	4649      	mov	r1, r9
 8001e62:	4640      	mov	r0, r8
 8001e64:	47d0      	blx	sl
 8001e66:	3001      	adds	r0, #1
 8001e68:	d09b      	beq.n	8001da2 <_printf_i+0x166>
 8001e6a:	3501      	adds	r5, #1
 8001e6c:	68e3      	ldr	r3, [r4, #12]
 8001e6e:	9903      	ldr	r1, [sp, #12]
 8001e70:	1a5b      	subs	r3, r3, r1
 8001e72:	42ab      	cmp	r3, r5
 8001e74:	dcf2      	bgt.n	8001e5c <_printf_i+0x220>
 8001e76:	e7eb      	b.n	8001e50 <_printf_i+0x214>
 8001e78:	2500      	movs	r5, #0
 8001e7a:	f104 0619 	add.w	r6, r4, #25
 8001e7e:	e7f5      	b.n	8001e6c <_printf_i+0x230>
 8001e80:	08002101 	.word	0x08002101
 8001e84:	08002112 	.word	0x08002112

08001e88 <_sbrk_r>:
 8001e88:	b538      	push	{r3, r4, r5, lr}
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	4d05      	ldr	r5, [pc, #20]	; (8001ea4 <_sbrk_r+0x1c>)
 8001e8e:	4604      	mov	r4, r0
 8001e90:	4608      	mov	r0, r1
 8001e92:	602b      	str	r3, [r5, #0]
 8001e94:	f7fe fae8 	bl	8000468 <_sbrk>
 8001e98:	1c43      	adds	r3, r0, #1
 8001e9a:	d102      	bne.n	8001ea2 <_sbrk_r+0x1a>
 8001e9c:	682b      	ldr	r3, [r5, #0]
 8001e9e:	b103      	cbz	r3, 8001ea2 <_sbrk_r+0x1a>
 8001ea0:	6023      	str	r3, [r4, #0]
 8001ea2:	bd38      	pop	{r3, r4, r5, pc}
 8001ea4:	200000a4 	.word	0x200000a4

08001ea8 <__sread>:
 8001ea8:	b510      	push	{r4, lr}
 8001eaa:	460c      	mov	r4, r1
 8001eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001eb0:	f000 f8ae 	bl	8002010 <_read_r>
 8001eb4:	2800      	cmp	r0, #0
 8001eb6:	bfab      	itete	ge
 8001eb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001eba:	89a3      	ldrhlt	r3, [r4, #12]
 8001ebc:	181b      	addge	r3, r3, r0
 8001ebe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001ec2:	bfac      	ite	ge
 8001ec4:	6563      	strge	r3, [r4, #84]	; 0x54
 8001ec6:	81a3      	strhlt	r3, [r4, #12]
 8001ec8:	bd10      	pop	{r4, pc}

08001eca <__swrite>:
 8001eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ece:	461f      	mov	r7, r3
 8001ed0:	898b      	ldrh	r3, [r1, #12]
 8001ed2:	4605      	mov	r5, r0
 8001ed4:	05db      	lsls	r3, r3, #23
 8001ed6:	460c      	mov	r4, r1
 8001ed8:	4616      	mov	r6, r2
 8001eda:	d505      	bpl.n	8001ee8 <__swrite+0x1e>
 8001edc:	2302      	movs	r3, #2
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ee4:	f000 f868 	bl	8001fb8 <_lseek_r>
 8001ee8:	89a3      	ldrh	r3, [r4, #12]
 8001eea:	4632      	mov	r2, r6
 8001eec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ef0:	81a3      	strh	r3, [r4, #12]
 8001ef2:	4628      	mov	r0, r5
 8001ef4:	463b      	mov	r3, r7
 8001ef6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001efe:	f000 b817 	b.w	8001f30 <_write_r>

08001f02 <__sseek>:
 8001f02:	b510      	push	{r4, lr}
 8001f04:	460c      	mov	r4, r1
 8001f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f0a:	f000 f855 	bl	8001fb8 <_lseek_r>
 8001f0e:	1c43      	adds	r3, r0, #1
 8001f10:	89a3      	ldrh	r3, [r4, #12]
 8001f12:	bf15      	itete	ne
 8001f14:	6560      	strne	r0, [r4, #84]	; 0x54
 8001f16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001f1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001f1e:	81a3      	strheq	r3, [r4, #12]
 8001f20:	bf18      	it	ne
 8001f22:	81a3      	strhne	r3, [r4, #12]
 8001f24:	bd10      	pop	{r4, pc}

08001f26 <__sclose>:
 8001f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f2a:	f000 b813 	b.w	8001f54 <_close_r>
	...

08001f30 <_write_r>:
 8001f30:	b538      	push	{r3, r4, r5, lr}
 8001f32:	4604      	mov	r4, r0
 8001f34:	4608      	mov	r0, r1
 8001f36:	4611      	mov	r1, r2
 8001f38:	2200      	movs	r2, #0
 8001f3a:	4d05      	ldr	r5, [pc, #20]	; (8001f50 <_write_r+0x20>)
 8001f3c:	602a      	str	r2, [r5, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	f7fe f92a 	bl	8000198 <_write>
 8001f44:	1c43      	adds	r3, r0, #1
 8001f46:	d102      	bne.n	8001f4e <_write_r+0x1e>
 8001f48:	682b      	ldr	r3, [r5, #0]
 8001f4a:	b103      	cbz	r3, 8001f4e <_write_r+0x1e>
 8001f4c:	6023      	str	r3, [r4, #0]
 8001f4e:	bd38      	pop	{r3, r4, r5, pc}
 8001f50:	200000a4 	.word	0x200000a4

08001f54 <_close_r>:
 8001f54:	b538      	push	{r3, r4, r5, lr}
 8001f56:	2300      	movs	r3, #0
 8001f58:	4d05      	ldr	r5, [pc, #20]	; (8001f70 <_close_r+0x1c>)
 8001f5a:	4604      	mov	r4, r0
 8001f5c:	4608      	mov	r0, r1
 8001f5e:	602b      	str	r3, [r5, #0]
 8001f60:	f7fe fa52 	bl	8000408 <_close>
 8001f64:	1c43      	adds	r3, r0, #1
 8001f66:	d102      	bne.n	8001f6e <_close_r+0x1a>
 8001f68:	682b      	ldr	r3, [r5, #0]
 8001f6a:	b103      	cbz	r3, 8001f6e <_close_r+0x1a>
 8001f6c:	6023      	str	r3, [r4, #0]
 8001f6e:	bd38      	pop	{r3, r4, r5, pc}
 8001f70:	200000a4 	.word	0x200000a4

08001f74 <_fstat_r>:
 8001f74:	b538      	push	{r3, r4, r5, lr}
 8001f76:	2300      	movs	r3, #0
 8001f78:	4d06      	ldr	r5, [pc, #24]	; (8001f94 <_fstat_r+0x20>)
 8001f7a:	4604      	mov	r4, r0
 8001f7c:	4608      	mov	r0, r1
 8001f7e:	4611      	mov	r1, r2
 8001f80:	602b      	str	r3, [r5, #0]
 8001f82:	f7fe fa4c 	bl	800041e <_fstat>
 8001f86:	1c43      	adds	r3, r0, #1
 8001f88:	d102      	bne.n	8001f90 <_fstat_r+0x1c>
 8001f8a:	682b      	ldr	r3, [r5, #0]
 8001f8c:	b103      	cbz	r3, 8001f90 <_fstat_r+0x1c>
 8001f8e:	6023      	str	r3, [r4, #0]
 8001f90:	bd38      	pop	{r3, r4, r5, pc}
 8001f92:	bf00      	nop
 8001f94:	200000a4 	.word	0x200000a4

08001f98 <_isatty_r>:
 8001f98:	b538      	push	{r3, r4, r5, lr}
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	4d05      	ldr	r5, [pc, #20]	; (8001fb4 <_isatty_r+0x1c>)
 8001f9e:	4604      	mov	r4, r0
 8001fa0:	4608      	mov	r0, r1
 8001fa2:	602b      	str	r3, [r5, #0]
 8001fa4:	f7fe fa4a 	bl	800043c <_isatty>
 8001fa8:	1c43      	adds	r3, r0, #1
 8001faa:	d102      	bne.n	8001fb2 <_isatty_r+0x1a>
 8001fac:	682b      	ldr	r3, [r5, #0]
 8001fae:	b103      	cbz	r3, 8001fb2 <_isatty_r+0x1a>
 8001fb0:	6023      	str	r3, [r4, #0]
 8001fb2:	bd38      	pop	{r3, r4, r5, pc}
 8001fb4:	200000a4 	.word	0x200000a4

08001fb8 <_lseek_r>:
 8001fb8:	b538      	push	{r3, r4, r5, lr}
 8001fba:	4604      	mov	r4, r0
 8001fbc:	4608      	mov	r0, r1
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	4d05      	ldr	r5, [pc, #20]	; (8001fd8 <_lseek_r+0x20>)
 8001fc4:	602a      	str	r2, [r5, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	f7fe fa42 	bl	8000450 <_lseek>
 8001fcc:	1c43      	adds	r3, r0, #1
 8001fce:	d102      	bne.n	8001fd6 <_lseek_r+0x1e>
 8001fd0:	682b      	ldr	r3, [r5, #0]
 8001fd2:	b103      	cbz	r3, 8001fd6 <_lseek_r+0x1e>
 8001fd4:	6023      	str	r3, [r4, #0]
 8001fd6:	bd38      	pop	{r3, r4, r5, pc}
 8001fd8:	200000a4 	.word	0x200000a4

08001fdc <memchr>:
 8001fdc:	4603      	mov	r3, r0
 8001fde:	b510      	push	{r4, lr}
 8001fe0:	b2c9      	uxtb	r1, r1
 8001fe2:	4402      	add	r2, r0
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	d101      	bne.n	8001fee <memchr+0x12>
 8001fea:	2000      	movs	r0, #0
 8001fec:	e003      	b.n	8001ff6 <memchr+0x1a>
 8001fee:	7804      	ldrb	r4, [r0, #0]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	428c      	cmp	r4, r1
 8001ff4:	d1f6      	bne.n	8001fe4 <memchr+0x8>
 8001ff6:	bd10      	pop	{r4, pc}

08001ff8 <__malloc_lock>:
 8001ff8:	4801      	ldr	r0, [pc, #4]	; (8002000 <__malloc_lock+0x8>)
 8001ffa:	f7ff bb13 	b.w	8001624 <__retarget_lock_acquire_recursive>
 8001ffe:	bf00      	nop
 8002000:	20000098 	.word	0x20000098

08002004 <__malloc_unlock>:
 8002004:	4801      	ldr	r0, [pc, #4]	; (800200c <__malloc_unlock+0x8>)
 8002006:	f7ff bb0e 	b.w	8001626 <__retarget_lock_release_recursive>
 800200a:	bf00      	nop
 800200c:	20000098 	.word	0x20000098

08002010 <_read_r>:
 8002010:	b538      	push	{r3, r4, r5, lr}
 8002012:	4604      	mov	r4, r0
 8002014:	4608      	mov	r0, r1
 8002016:	4611      	mov	r1, r2
 8002018:	2200      	movs	r2, #0
 800201a:	4d05      	ldr	r5, [pc, #20]	; (8002030 <_read_r+0x20>)
 800201c:	602a      	str	r2, [r5, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	f7fe f9d5 	bl	80003ce <_read>
 8002024:	1c43      	adds	r3, r0, #1
 8002026:	d102      	bne.n	800202e <_read_r+0x1e>
 8002028:	682b      	ldr	r3, [r5, #0]
 800202a:	b103      	cbz	r3, 800202e <_read_r+0x1e>
 800202c:	6023      	str	r3, [r4, #0]
 800202e:	bd38      	pop	{r3, r4, r5, pc}
 8002030:	200000a4 	.word	0x200000a4

08002034 <_init>:
 8002034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002036:	bf00      	nop
 8002038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800203a:	bc08      	pop	{r3}
 800203c:	469e      	mov	lr, r3
 800203e:	4770      	bx	lr

08002040 <_fini>:
 8002040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002042:	bf00      	nop
 8002044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002046:	bc08      	pop	{r3}
 8002048:	469e      	mov	lr, r3
 800204a:	4770      	bx	lr
